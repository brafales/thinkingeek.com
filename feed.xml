<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://thinkingeek.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thinkingeek.com/" rel="alternate" type="text/html" /><updated>2022-01-03T22:16:13+00:00</updated><id>https://thinkingeek.com/feed.xml</id><title type="html">Think In Geek</title><subtitle>In geek we trust</subtitle><entry><title type="html">OpenSSH as a SOCKS server</title><link href="https://thinkingeek.com/2022/01/03/ssh-and-socks/" rel="alternate" type="text/html" title="OpenSSH as a SOCKS server" /><published>2022-01-03T22:03:00+00:00</published><updated>2022-01-03T22:03:00+00:00</updated><id>https://thinkingeek.com/2022/01/03/ssh-and-socks</id><content type="html" xml:base="https://thinkingeek.com/2022/01/03/ssh-and-socks/">&lt;p&gt;Sometimes we are given access via ssh to nodes that do not have, for policy or
technical reasons, access to the internet (i.e. they cannot make outbound
connections).  Depending on the policies, we may be able to open reverse SSH
tunnels, so things are not so bad.&lt;/p&gt;

&lt;p&gt;Recently I discovered that OpenSSH comes with a SOCKS proxy server integrated.
This is probably a well known feature of OpenSSH but I thought it was
interesting to share how it can be used.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;SOCKS&lt;/h2&gt;

&lt;p&gt;Nowadays, access to the Internet is ubiquitous and most of the time assumed as
a fact. However, in some circumstances, direct access to the internet is not
available or not desirable. In those cases we can resort on proxy servers that
act as intermediaries between the Internet and the node without direct access.&lt;/p&gt;

&lt;p&gt;Many tools used commonly assume one is connected to the Internet: package
managers such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo&lt;/code&gt; can automatically download the files
required to install a package. If no outbound connection is possible,
software deployment and installation becomes complicated.&lt;/p&gt;

&lt;p&gt;However, most of the time those tools only HTTP/HTTPS support is required. So
a proxy that only forwards HTTP and HTTPS requests is enough. Examples
of these kind of proxies are &lt;a href=&quot;http://tinyproxy.github.io/&quot;&gt;tinyproxy&lt;/a&gt; and
&lt;a href=&quot;http://www.squid-cache.org/&quot;&gt;squid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SOCKS&quot;&gt;SOCKS&lt;/a&gt;, is a general proxy protocol that
can be used for any TCP connection, not only those for HTTP/HTTPS. An
interesting thing is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; comes with an integrated SOCKS proxy which is
relatively easy to use. Often most tools that can use a HTTP/HTTPS proxy can
also use a SOCKS proxy so this is a handy option to consider.&lt;/p&gt;

&lt;h2&gt;Example: Installing Rust through a proxy&lt;/h2&gt;

&lt;p&gt;If we try to install &lt;a href=&quot;https://www.rust-lang.org/learn/get-started&quot;&gt;Rust&lt;/a&gt; on a
machine that does not allow outbound connections, this is what happens. (Let’s
ignore the question whether piping a downloaded to the shell is a reasonable
thing to do).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@no-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--proto&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'=https'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tlsv1&lt;/span&gt;.2 &lt;span class=&quot;nt&quot;&gt;-sSf&lt;/span&gt; https://sh.rustup.rs | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will likely time out after a long time because outbound
connections are silently dropped and the installation will fail.&lt;/p&gt;

&lt;h3&gt;Set up proxy server&lt;/h3&gt;

&lt;p&gt;To address this, let’s first open a SOCKS proxy using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; on our local machine
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with-internet&lt;/code&gt;). This machine &lt;strong&gt;must&lt;/strong&gt; have internet access (change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; to
your username). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; will request you to authenticate (via password or ssh
key).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@with-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; 127.0.0.1:12345 user@localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-N&lt;/code&gt; means not to execute a command and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D interface:port&lt;/code&gt; means to
open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port&lt;/code&gt; bound to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt;. This is the SOCKS proxy. In this
example we are opening port 12345 and binding it to the 127.0.0.1 (localhost)
interface. We are using the same machine as the proxy, hence &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user@localhost&lt;/code&gt;
(it is possible to use another node, but we don’t have to given that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with-internet&lt;/code&gt; already can connect to the internet). This must stay running so
you will have to open another terminal and set up the reverse tunnel.&lt;/p&gt;

&lt;p&gt;To set up the reverse tunnel do the following.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@with-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 127.0.0.1:9999:127.0.0.1:12345 &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; user@no-internet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This opens the port 9999 in the host without internet (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no-internet&lt;/code&gt;) and binds
it to its localhost (i.e. the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no-internet&lt;/code&gt;) then it tunnels it
to the port 12345 bound to the interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; of our local node
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with-internet&lt;/code&gt;). Again this will not run any command (due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-N&lt;/code&gt;) and the
syntax of -R is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-R remote-interface:remote-port:local-interface:local-port&lt;/code&gt;.
Keep this command running.&lt;/p&gt;

&lt;h3&gt;Proxy configuration&lt;/h3&gt;

&lt;p&gt;Now we can setup &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; to use a socks proxy. We do this with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--proxy-option&lt;/code&gt;. For convenience we will first download the installation
script into a file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@no-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--proto&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'=https'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tlsv1&lt;/span&gt;.2 &lt;span class=&quot;nt&quot;&gt;-sSf&lt;/span&gt; https://sh.rustup.rs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                       &lt;span class=&quot;nt&quot;&gt;--proxy&lt;/span&gt; socks5://localhost:9999 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;  install-rust.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can do a quick check that it contains what we expect&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@no-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;head &lt;/span&gt;install-rust.sh 
&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# shellcheck shell=dash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This is just a little script that can be downloaded from the internet to&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# install rustup. It just does platform detection, downloads the installer&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and runs it.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# It runs on Unix shells like {a,ba,da,k,z}sh. It uses the common `local`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# extension. Note: Most shells limit `local` to 1 var per line, contra bash.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Install Rust&lt;/h3&gt;

&lt;p&gt;We can set up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https_proxy&lt;/code&gt; environment variable to point to the SOCKS
server so it is used by the installation script.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@no-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;https_proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;socks5://localhost:9999
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are read to install Rust using the script we downloaded.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@no-internet &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash install-rust.sh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;info: downloading installer

Welcome to Rust!

This will download and install the official compiler for the Rust
programming language, and its package manager, Cargo.

Rustup metadata and toolchains will be installed into the Rustup
home directory, located at:

  /home/user/.rustup

This can be modified with the RUSTUP_HOME environment variable.

The Cargo home directory located at:

  /home/user/.cargo

This can be modified with the CARGO_HOME environment variable.

The cargo, rustc, rustup and other commands will be added to
Cargo's bin directory, located at:

  /home/user/.cargo/bin

This path will then be added to your PATH environment variable by
modifying the profile files located at:

  /home/user/.profile
  /home/user/.zshenv

You can uninstall at any time with rustup self uninstall and
these changes will be reverted.

Current installation options:


   default host triple: x86_64-unknown-linux-gnu
     default toolchain: stable (default)
               profile: default
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
&amp;gt;1

info: profile set to 'default'
info: default host triple is x86_64-unknown-linux-gnu
info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'
info: latest update on 2021-12-02, rust version 1.57.0 (f1edd0429 2021-11-29)
info: downloading component 'cargo'
info: downloading component 'clippy'
info: downloading component 'rust-docs'
info: downloading component 'rust-std'
 24.9 MiB /  24.9 MiB (100 %)  19.9 MiB/s in  1s ETA:  0s
info: downloading component 'rustc'
 53.9 MiB /  53.9 MiB (100 %)  20.1 MiB/s in  2s ETA:  0s
info: downloading component 'rustfmt'
info: installing component 'cargo'
info: installing component 'clippy'
info: installing component 'rust-docs'
  5.3 MiB /  17.9 MiB ( 29 %)   1.7 MiB/s in  6s ETA:  7s
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once Rust is installed, &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/config.html#httpproxy&quot;&gt;you can setup &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo&lt;/code&gt; so it always uses this
proxy&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Example: Using pip using SOCKS&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; is used to install Python packages. Unfortunately &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; does not support
SOCKS by default. If you try to install &lt;a href=&quot;https://github.com/google/yapf&quot;&gt;yapf&lt;/a&gt;
using the configuration above this happens:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@no-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;socks5://localhost:9999 yapf
Collecting yapf
ERROR: Could not &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;packages due to an EnvironmentError: Missing dependencies &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;SOCKS support.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you need to install first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pysocks&lt;/code&gt;. Now we have a chicken-and-egg situation
that we need to solve: we cannot download pysocks on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no-internet&lt;/code&gt; machine!
To solve it, download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pysocks&lt;/code&gt; locally:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@with-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; pip download pysocks
Collecting pysocks
  Downloading PySocks-1.7.1-py3-none-any.whl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;16 kB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Saved ./PySocks-1.7.1-py3-none-any.whl
Successfully downloaded pysocks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy this &lt;a href=&quot;https://pythonwheels.com/&quot;&gt;python wheels&lt;/a&gt; file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no-internet&lt;/code&gt;, for
instance using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@with-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scp PySocks-1.7.1-py3-none-any.whl user@no-internet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And install it manually there. I’m installing it in the user environment
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--user&lt;/code&gt; flag) because in this machine I don’t have enough permissions, but
your mileage may vary here.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@no-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; PySocks-1.7.1-py3-none-any.whl 
Processing ./PySocks-1.7.1-py3-none-any.whl
Installing collected packages: PySocks
Successfully installed PySocks-1.7.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we use pip and SOCKS, now we succeed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user@no-internet&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;socks5://localhost:9999 yapf
Collecting yapf
  Downloading https://files.pythonhosted.org/packages/47/88/843c2e68f18a5879b4fbf37cb99fbabe1ffc4343b2e63191c8462235c008/yapf-0.32.0-py2.py3-none-any.whl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;190kB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     |████████████████████████████████| 194kB 933kB/s 
Installing collected packages: yapf
Successfully installed yapf-0.32.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay!&lt;/p&gt;

&lt;h3&gt;Cleanup&lt;/h3&gt;

&lt;p&gt;Recall we have two connections opened: one is the SOCKS proxy (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D&lt;/code&gt;) and the
other the reverse tunnel (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-R&lt;/code&gt;). Just end them both with Ctrl-C and you are
done. I’m sure this can be scripted somehow but given that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; commands
may require password input, this is not a trivial thing to do.&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><category term="SOCKS" /><category term="proxy" /><category term="ssh" /><summary type="html">Sometimes we are given access via ssh to nodes that do not have, for policy or technical reasons, access to the internet (i.e. they cannot make outbound connections). Depending on the policies, we may be able to open reverse SSH tunnels, so things are not so bad. Recently I discovered that OpenSSH comes with a SOCKS proxy server integrated. This is probably a well known feature of OpenSSH but I thought it was interesting to share how it can be used.</summary></entry><entry><title type="html">Distributed compilation in a cluster</title><link href="https://thinkingeek.com/2021/12/31/using-distcc-in-a-cluster/" rel="alternate" type="text/html" title="Distributed compilation in a cluster" /><published>2021-12-31T16:20:00+00:00</published><updated>2021-12-31T16:20:00+00:00</updated><id>https://thinkingeek.com/2021/12/31/using-distcc-in-a-cluster</id><content type="html" xml:base="https://thinkingeek.com/2021/12/31/using-distcc-in-a-cluster/">&lt;p&gt;In software development there is an unavoidable trend in which applications
become larger and more complex. For compiled programming languages one of
the consequences is that their compilation takes longer.&lt;/p&gt;

&lt;p&gt;Today I want to talk about using &lt;a href=&quot;https://distcc.github.io/&quot;&gt;distcc&lt;/a&gt; to speed
C/C++ compilation using different nodes in a scientific cluster.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;Distributed compilation&lt;/h1&gt;

&lt;p&gt;Some programming languages, like C++, are slow to compile. Ideally the root
causes of the slowness would be attacked and we would call it a day. However
the real causes of the slowness are many and they are not trivial to solve. So
as an alternative, for now, we can try to throw more resources at compiling C++.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://distcc.github.io/&quot;&gt;distcc&lt;/a&gt; is a tool that helps us doing so by
distributing a C/C++ compilation accross several nodes accessible via a
network. Distcc has relatively low expectations about the nodes: ideally you only
need the same compiler installed everywhere. This is because the default operation
mode of distcc is based on distributing the preprocessed files. This works
but we can do a bit better if we are able to also preprocess distributedly, distcc
calls this the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pump&lt;/code&gt; mode.&lt;/p&gt;

&lt;h2&gt;Scientific clusters&lt;/h2&gt;

&lt;p&gt;Scientific clusters are designed to execute applications that need lots of
computational resources. As such they are usually structured as one or more
login nodes and a set of computational nodes. Users can connect to login nodes
but can only access computational nodes after they have allocated the
resources. The allocation is requested from the login node. A common resource
manager to do that is Slurm.&lt;/p&gt;

&lt;h1&gt;Example: compiling LLVM on 4 nodes&lt;/h1&gt;

&lt;h2&gt;Install distcc&lt;/h2&gt;

&lt;p&gt;I’ll assume &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distcc&lt;/code&gt; is already installed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;install-distcc&amp;gt;&lt;/code&gt;. It is not
difficult to install from source. Make sure the installation directory is in
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;install-distcc&amp;gt;/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;Set up distcc&lt;/h2&gt;

&lt;p&gt;In general, using login nodes for anything other than allocating computational
resources is frowned upon. So we will request 5 nodes. One of them, the main,
will be used to orchestrate the compilation, and the other 4 will be used for
the compilation itself.&lt;/p&gt;

&lt;p&gt;For this example I’m going to use Slurm. Even if your cluster is using Slurm
too, its site-configuration may be different and there may be small operational
differences. Check your site documentation.&lt;/p&gt;

&lt;p&gt;First of all, let’s request the resources using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;salloc&lt;/code&gt; command from Slurm.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;salloc &lt;span class=&quot;nt&quot;&gt;--qos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;debug &lt;span class=&quot;nt&quot;&gt;--time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;01:00:00 &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; 5
salloc: Pending job allocation 12345678
salloc: job 12345678 queued and waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;resources
salloc: job 12345678 has been allocated resources
salloc: Granted job allocation 12345678
salloc: Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;resource configuration
salloc: Nodes z04r1b64,z05r2b[38-39],z09r2b56,z13r1b01 are ready &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;job
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the cluster I’m using, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;/code&gt; is a special partition meant to do debugging
or compiling applications. I’m requesting 5 nodes for 1 hour.&lt;/p&gt;

&lt;p&gt;The allocation is often fulfilled quickly (but this depends on the level
of utilisation of the cluster, which often correlates with deadlines!).&lt;/p&gt;

&lt;p&gt;The cluster I’m using automatically logins you to the first allocated node
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z04r1b64&lt;/code&gt;).  Some other clusters may require you to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;We need to make sure distcc will allow us to use the compiler we plan to use.
So edit the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;install-distcc&amp;gt;/etc/distcc/commands.allow.sh&lt;/code&gt; and add
the full path to the compiler you want to use. In my case I will be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt;
installed in a non-default path.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&amp;lt;install-distcc&amp;gt;/etc/distcc/commands.allow.sh&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;allowed_compilers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;
  /usr/bin/cc
  /usr/bin/c++
  /usr/bin/c89
  /usr/bin/c99
  /usr/bin/gcc
  /usr/bin/g++
  /usr/bin/*gcc-*
  /usr/bin/*g++-*
  /apps/LLVM/12.0.1/GCC/bin/clang
  /apps/LLVM/12.0.1/GCC/bin/clang++
&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we are going to use
&lt;a href=&quot;https://clustershell.readthedocs.io/en/latest/tools/clush.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clush&lt;/code&gt;&lt;/a&gt; to
start the distcc daemon on the other nodes.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;clush &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;z05r2b[38-39],z09r2b56,z13r1b01&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &amp;lt;install-distcc&amp;gt;/bin/distccd &lt;span class=&quot;nt&quot;&gt;--daemon&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--allow&lt;/span&gt; 10.0.0.0/8 &lt;span class=&quot;nt&quot;&gt;--enable-tcp-insecure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Luckily &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clush&lt;/code&gt; understands Slurm’s nodeset notation, so we can just use it
directly (but make sure you do not pass the main node). We request it to be a
daemon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--daemon&lt;/code&gt; and allow all the nodes of the private LAN used by the
cluster. The flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--enable-tcp-insecure&lt;/code&gt; is required because, for simplicity,
we will not use the &lt;em&gt;masquerade&lt;/em&gt; feature of distcc. This is a safety feature
that should be considered later.&lt;/p&gt;

&lt;p&gt;At this point we must setup the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISTCC_HOSTS&lt;/code&gt; environment variable.
Unfortunately &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distcc&lt;/code&gt; cannot use Slurm’s nodeset notation. A tool called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodeset&lt;/code&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clush&lt;/code&gt; itself) will come handy here.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodeset &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; z04r1b64,z05r2b[38-39],z09r2b56,s13r1b01
z05r2b38 z05r2b39 z04r1b64 z09r2b56 s13r1b01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISTCC_HOSTS&lt;/code&gt; has the following syntax for each host:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host/limit,options&lt;/code&gt;. We are going to use as options &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzo,cpp&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lzo&lt;/code&gt; means
compressing the files during network transfers and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpp&lt;/code&gt; will allow us to
enable the pump mode. Each of our nodes has 48 cores, so let’s use that as a
limit (distcc’s default is 4 concurrent jobs). Also let’s not forget to remove
the main node. We can use the following script.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;setup_distcc.sh&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CURRENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DISTCC_HOSTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;nodeset &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SLURM_NODELIST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NODES&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Ignore current host.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CURRENT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
   continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DISTCC_HOSTS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Add separator.&lt;/span&gt;
    DISTCC_HOSTS+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi
  &lt;/span&gt;DISTCC_HOSTS+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/48,lzo,cpp&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;DISTCC_HOSTS&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;set_distcc_hosts.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DISTCC_HOSTS&lt;/span&gt;
z05r2b3/48,lzo,cpp z04r1b6/48,lzo,cpp z09r2b5/48,lzo,cpp s13r1b0/48,lzo,cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are ready to build.&lt;/p&gt;

&lt;h2&gt;LLVM’s cmake&lt;/h2&gt;

&lt;p&gt;In a separate build directory, invoke cmake as usual. Make sure you specify
the compiler you want to use. The easiest way to do this is setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CC&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CXX&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will compile only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang&lt;/code&gt; in this example.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Source of llvm is in ./llvm-src&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;llvm-build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;llvm-build
&lt;span class=&quot;nv&quot;&gt;$ CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/apps/LLVM/12.0.1/GCC/bin/clang&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CXX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/apps/LLVM/12.0.1/GCC/bin/clang++&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  cmake &lt;span class=&quot;nt&quot;&gt;-G&lt;/span&gt; Ninja ../llvm-src/llvm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Release &lt;span class=&quot;s2&quot;&gt;&quot;-DLLVM_ENABLE_PROJECTS=clang&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-DLLVM_ENABLE_LLD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON &lt;span class=&quot;nt&quot;&gt;-DCMAKE_RANLIB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;which llvm-ranlib&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-DCMAKE_AR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;which llvm-ar&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DLLVM_PARALLEL_LINK_JOBS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;48 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-DCMAKE_C_COMPILER_LAUNCHER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;distcc &lt;span class=&quot;nt&quot;&gt;-DCMAKE_CXX_COMPILER_LAUNCHER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;distcc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The important flags here are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DCMAKE_C_COMPILER_LAUNCHER=distcc&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-DCMAKE_CXX_COMPILER_LAUNCHER=distcc&lt;/code&gt;. The build system will use these when
building (but not during configuration, which is convenient). The other flags
are just to ensure a release build and force the build system to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lld&lt;/code&gt;, not
to run (locally) more than 48 link jobs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm-ranlib&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm-ar&lt;/code&gt; from LLVM
which are faster than the usual GNU counterparts.&lt;/p&gt;

&lt;p&gt;The cmake invocation should complete successfully.&lt;/p&gt;

&lt;p&gt;Before we continue, we must make sure the variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CPATH&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C_INCLUDE_PATH&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CPLUS_INCLUDE_PATH&lt;/code&gt; are not set, otherwise the pump mode will refuse to
work.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;CPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we can invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ninja&lt;/code&gt; but telling it that it uses 192 (= 48 × 4)
concurrent jobs.  We have to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pump&lt;/code&gt; to enable distcc’s pump mode.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;pump ninja &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
__________Using distcc-pump from &amp;lt;install-distcc&amp;gt;/bin
__________Using 4 distcc servers &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;pump mode
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;4382/4382] Linking CXX executable bin/c-index-test
__________Shutting down distcc-pump include server

real	3m0.985s
user	4m42.380s
sys	2m56.167s

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3 minutes to compile clang+LLVM in Release mode is not bad 😀&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><category term="distributed" /><category term="compilation" /><category term="cluster" /><category term="HPC" /><category term="scientific" /><summary type="html">In software development there is an unavoidable trend in which applications become larger and more complex. For compiled programming languages one of the consequences is that their compilation takes longer. Today I want to talk about using distcc to speed C/C++ compilation using different nodes in a scientific cluster.</summary></entry><entry><title type="html">Fun with vectors in the Raspberry Pi 1 - Part 9</title><link href="https://thinkingeek.com/2021/08/22/raspberry-vectors-part-9/" rel="alternate" type="text/html" title="Fun with vectors in the Raspberry Pi 1 - Part 9" /><published>2021-08-22T09:48:00+00:00</published><updated>2021-08-22T09:48:00+00:00</updated><id>https://thinkingeek.com/2021/08/22/raspberry-vectors-part-9</id><content type="html" xml:base="https://thinkingeek.com/2021/08/22/raspberry-vectors-part-9/">&lt;p&gt;I think we have enough pieces of machinery working already that we can start
with the most exciting part of this journey: autovectorisation!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;SIMD&lt;/h2&gt;

&lt;h3&gt;Data parallelism&lt;/h3&gt;

&lt;p&gt;If we look at the step of computations required by an algorithm, we may find
that often the precise order between some of the steps is not relevant. When
this happens we say that those steps could run concurrently and the algorithm
would still be correct. We can call &lt;em&gt;concurrency&lt;/em&gt; to the number of operations
that can be executed concurrently.  When concurrency is somewhat related (or
directly proportional) to the amount of data being processed by the algorithm
we can say that it exposes &lt;em&gt;data parallelism&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The following C program tells us to add elements from two arrays from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N-1&lt;/code&gt; but nothing it it requires that. For instance, we could run from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N-1&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and the observable effect would be identical.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;simple_add.c&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vector_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can exploit &lt;em&gt;data parallelism&lt;/em&gt; in many ways: we can distribute parts of the
computation over different computers in a cluster, over different threads in a
multicore or, the approach we are interested in, between the different elements
of a vector of a CPU using SIMD instructions. The important assumption here is
that all of the mentioned approaches can perform several computations
simultaneously in time.&lt;/p&gt;

&lt;p&gt;SIMD precisely represents this idea: Single Instruction Multiple Data. With a
single CPU instruction we can process more than one element of data.  We can
obtain performane gains from using SIMD instructions if the CPU can execute
them in a similar amount of time as their scalar counterparts. It all this
depends on the amount of resources that the CPU has. The ARM1176JZF-S that
powers the Raspberry Pi 1 does not devote extra resources, so vector
instructions take proportionally longer, so we will not improve the performance
a lot. However there are still some small gains here: each instruction executed
comes with a (small) fixed cost which we are now avoiding.&lt;/p&gt;

&lt;h3&gt;Autovectorisation&lt;/h3&gt;

&lt;p&gt;Compilers may be able to identify in some circumstances that the source code is
expressing data parallel computation. We will focus on loops though it is
possible to identify similar cases for straight-line code.&lt;/p&gt;

&lt;p&gt;Once those cases are identified, the compiler may be able to implement the
scalar computation using vector instructions. This process is called
&lt;em&gt;vectorisation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Historically automatic vectorisation has been a bit disappointing. Compilers
must be very careful not to break the semantics of the program. Some
programming languages, such as C and C++, require very complex analyses to
determine the safety of the vectorisation. This process is also time consuming
and it is not commonly enabled by default in mainstream compilers. So many
interesting loops which potentially could be vectorised are not vectorised. Or
worse, the programmer has to adapt the code so it ends being vectorised.&lt;/p&gt;

&lt;h2&gt;Enable vectorisation in LLVM&lt;/h2&gt;

&lt;p&gt;Vectorization is necessarily a target-specific transformation. LLVM IR is not
platform neutral but its genericity helps reusing code between architectures.
Sometimes the LLVM IR optimisation passes need information from the
backend to assess if a transformation is profitable or not.&lt;/p&gt;

&lt;p&gt;The loop vectoriser is not an exception to this, so before we can get it to
vectorise simple codes, we need to teach the ARM backend about the new vector
reality.&lt;/p&gt;

&lt;p&gt;A first thing we need to do is to let LLVM know how many vector registers
are there. We mentioned that in practice is like if there were 6 of them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMTargetTransformInfo.h&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;   unsigned getNumberOfRegisters(unsigned ClassID) const {
     bool Vector = (ClassID == 1);
     if (Vector) {
&lt;span class=&quot;gi&quot;&gt;+      if (ST-&amp;gt;hasVFP2Base())
+        return 6;
&lt;/span&gt;       if (ST-&amp;gt;hasNEON())
         return 16;
       if (ST-&amp;gt;hasMVEIntegerOps())
         return 8;
       return 0;
     }
 
     if (ST-&amp;gt;isThumb1Only())
       return 8;
     return 13;
   }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A second thing we need to let LLVM know is the size of our vectors. Because we
aim only for vectors that can hold either 4 floats or 2 doubles and both
cases amount to 128 bit, we will claim that size.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMTargetTransformInfo.h&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;   TypeSize getRegisterBitWidth(TargetTransformInfo::RegisterKind K) const {
     switch (K) {
     case TargetTransformInfo::RGK_Scalar:
       return TypeSize::getFixed(32);
     case TargetTransformInfo::RGK_FixedWidthVector:
&lt;span class=&quot;gi&quot;&gt;+      if (ST-&amp;gt;hasVFP2Base())
+        return TypeSize::getFixed(128);
&lt;/span&gt;       if (ST-&amp;gt;hasNEON())
         return TypeSize::getFixed(128);
       if (ST-&amp;gt;hasMVEIntegerOps())
         return TypeSize::getFixed(128);
       return TypeSize::getFixed(0);
     case TargetTransformInfo::RGK_ScalableVector:
       return TypeSize::getScalable(0);
     }
     llvm_unreachable(&quot;Unsupported register kind&quot;);
   }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With all this we can try our loop above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;clang &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6-linux-gnueabihf &lt;span class=&quot;nt&quot;&gt;-O2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o-&lt;/span&gt; simple_add.c&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;vector_sum:
	.fnstart
@ %bb.0:
	.save	{r11, lr}
	push	{r11, lr}
	ldr	r12, .LCPI0_0
	ldr	lr, .LCPI0_1
	ldr	r3, .LCPI0_2
	mov	r0, #0
.LBB0_1:                                @ =&amp;gt;This Inner Loop Header: Depth=1
	add	r1, r12, r0
	add	r2, lr, r0
	vldr	s2, [r1]
	vldr	s0, [r2]
	add	r1, r3, r0
	add	r0, r0, #4
	cmp	r0, #4096
	vadd.f32	s0, s2, s0
	vstr	s0, [r1]
	bne	.LBB0_1
@ %bb.2:
	pop	{r11, pc}
	.p2align	2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Uhm, this is not what we wanted, right? The reason is that in general the
vectoriser will try not to make unsafe transformations. VFP instructions are
not 100% compliant with IEEE-754 so the vectoriser will not use them by
default.&lt;/p&gt;

&lt;p&gt;We need to tell the compiler “it is OK, let’s use not 100% precise
instructions” by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O2 -ffast-math&lt;/code&gt; or the shorter form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Ofast&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;clang &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6-linux-gnueabihf &lt;span class=&quot;nt&quot;&gt;-Ofast&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o-&lt;/span&gt; simple_add.c&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;vector_sum:
	.fnstart
@ %bb.0:
	.save	{r4, lr}
	push	{r4, lr}
	.vsave	{d8, d9, d10, d11}
	vpush	{d8, d9, d10, d11}
	ldr	r12, .LCPI0_0
	ldr	lr, .LCPI0_1
	ldr	r3, .LCPI0_2
	mov	r0, #0
.LBB0_1:                                @ =&amp;gt;This Inner Loop Header: Depth=1
	add	r1, r12, r0
	add	r2, lr, r0
	vldmia	r1, {s16, s17, s18, s19, s20, s21, s22, s23}
	vldmia	r2, {s8, s9, s10, s11, s12, s13, s14, s15}
	vmrs	r2, fpscr
	mov	r1, #196608
	bic	r2, r2, #458752
	orr	r2, r2, r1
	vmsr	fpscr, r2
	vadd.f32	s12, s20, s12
	vadd.f32	s8, s16, s8
	add	r1, r3, r0
	add	r0, r0, #32
	add	r2, r1, #20
	cmp	r0, #4096
	vstmia	r2, {s13, s14, s15}
	vstmia	r1, {s8, s9, s10, s11, s12}
	bne	.LBB0_1
@ %bb.2:
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	vmsr	fpscr, r1
	vpop	{d8, d9, d10, d11}
	pop	{r4, pc}
	.p2align	2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is more interesting!&lt;/p&gt;

&lt;p&gt;Note however we have some gross inefficiency here: we are changing the vector
length (setting it to 2) in every iteration of the loop. Later in this post we
will evaluate if it is worth trying to hoist it out of the loop.&lt;/p&gt;

&lt;h2&gt;A very simple benchmark&lt;/h2&gt;

&lt;p&gt;Let’s use this &lt;a href=&quot;https://gist.github.com/rofirrim/813729ddb7c2f29898f678cc30a0b5e0&quot;&gt;simple
benchmark&lt;/a&gt;
that computes a vector addition of floats (similar to the code shown above in
the post).  It also has a mechanism to validate the scalar version and the
vector version. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#pragma clang loop&lt;/code&gt; is used to explicitly disable
vectorisation in the scalar loops that would otherwise be vectorised.&lt;/p&gt;

&lt;p&gt;The benchmark can be adjusted for number of times we run the benchmark and the
size of the vector. This is useful to run it in different scenarios.&lt;/p&gt;

&lt;p&gt;This benchmark has a low ratio of computation over memory accesses. We do one
addition and three memory accesses (two loads and one store).  This means that
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Roofline_model&quot;&gt;&lt;em&gt;arithmetic intensity&lt;/em&gt;&lt;/a&gt; of
this benchmark is small. We may not be able to observe a lot of improvement
with vector instructions.&lt;/p&gt;

&lt;p&gt;We can study more favourable situations if we use smaller arrays. In this case,
when we run the benchmark again, chances are that the vector will be in the
cache already.  While the arithmetic intensity hasn’t changed, in this
situation the arithmetic computation has higher weight in the overall
execution.&lt;/p&gt;

&lt;p&gt;Let’s look at two executions of the benchmark. The figure below show the ratio
of execution time of the vector loop respect to the scalar loop (not vectorised
at all). The plot at the left shows the results when the vectorised loop sets
the vector length at each iteration, as it is emitted by the compiler. The
plot at the right shows the results when the vector length change is hoisted
out of the loop: this is, it is set only once before entering the vector body.
I did this transformation by editing the assembly output.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/assets/images/vadd-results.svg&quot; alt=&quot;Plot with speedup of vector addition results&quot; /&gt;
    &lt;figcaption&gt;Very simple array addition benchmark. The plot at the left
contains the results for the program as it is emitted by the compiler with
vectorisation enabled. It sets the vector length at each iteration of the
vectorised loop. The plot at the right contains the result for a manually
modified assembly output so it sets the vector length right before entering the
vectorised loop. The benchmark runs 256 times and it was run 50 times for
each array length (from 4 to 131072).
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In both cases an array of 4 floats does not perform very well because the loop
has been vectorised using an interleave factor of 2. So each vector loop
iteration wants to process 8 iterations of the original scalar loop. There is
some overhead setting up the vector length to 1 in the tail loop (the loop that
processes the remaining elements that do not complete a vector) hence the bad
performance. This is less noticeable on the right plot as the vector length is
only set once before entering the scalar loop (not once per iteration of the
loop as it happens on the left).&lt;/p&gt;

&lt;p&gt;On the left plot we see that, until 4096 float elements, the improvement over
scalar is modest: around 2.5X the scalar code. I believe changing the vector
lenght (which requires reading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;) introduces some extra cost that
limits the performance. On the right plot we see it improves up to ~3.4X. This
means it is a good idea to hoist the set vector length out of the vector loop
if possible. We will look into it in a later chapter.&lt;/p&gt;

&lt;p&gt;Starting from 4096, both plots show a similar performance degradation. The
reason is that our &lt;em&gt;working set&lt;/em&gt; is now beyond the &lt;a href=&quot;http://sandsoftwaresound.net/raspberry-pi/raspberry-pi-gen-1/memory-hierarchy/&quot;&gt;16KB of the L1 data
cache&lt;/a&gt;.
Note that when using arrays of 2048 float elements each array takes 8KB.  Given
that the benchmark uses two of them in the loop, our &lt;em&gt;working set&lt;/em&gt; is 16KB.
Beyond that we overflow the cache (the L2, afaict is not used) and the
performance drops to ~1.3X. The low arithmetic intensity of this benchmark
means it quickly becomes a memory-bound problem rather than a CPU-bound
problem. Vectorisation is unlikely to help under memory-bound problems.&lt;/p&gt;

&lt;h3&gt;Too good to be true?&lt;/h3&gt;

&lt;p&gt;After thinking a bit more about the results, a doubt came to mind. In practice,
this is like if we had unrolled the loop but using hardware instructions. This
is because the vector mode of the VFP does not bring any performance benefit:
the latency of the instructions is scaled by the vector length.&lt;/p&gt;

&lt;p&gt;So I extended the benchmark to include an unrolled version of the vector
addition, without vectorisation. I think the results speak for themselves.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/assets/images/vadd-results-plus-unroll.svg&quot; alt=&quot;Plot with speedup of vector addition results including an unrolled version&quot; /&gt;
    &lt;figcaption&gt;
Unrolling is almost as competitive in performance as vectorising in the naive
way. We can get a bit of an edge if we hoist the set vector length, but this
advantage quickly fades away.
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So as I already hypothesised at the first chapter of this series, the only
benefit we may obtain from using vector instructions is code size
improvement.&lt;/p&gt;

&lt;p&gt;In the next chapter we will look into trying to hoist the set vector length
out of the loops that only set it once (which we expect to be the common
case for vectorised loops).&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><summary type="html">I think we have enough pieces of machinery working already that we can start with the most exciting part of this journey: autovectorisation!</summary></entry><entry><title type="html">Fun with vectors in the Raspberry Pi 1 - Part 8</title><link href="https://thinkingeek.com/2021/08/15/raspberry-vectors-part-8/" rel="alternate" type="text/html" title="Fun with vectors in the Raspberry Pi 1 - Part 8" /><published>2021-08-15T08:16:00+00:00</published><updated>2021-08-15T08:16:00+00:00</updated><id>https://thinkingeek.com/2021/08/15/raspberry-vectors-part-8</id><content type="html" xml:base="https://thinkingeek.com/2021/08/15/raspberry-vectors-part-8/">&lt;p&gt;In the last installment I mentioned we could start looking at enabling
the vectoriser in the compiler. However when I did that I realised some
benchmarks were giving weird results. I had made a mistake with copies,
so let’s remediate this.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Source of the problem: copies and vector length&lt;/h2&gt;

&lt;p&gt;In the first installment of this series we discussed about instructions that
used the vector length. Unfortunately I missed an important one: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmov&lt;/code&gt;, used
to copy vector registers.  Contrarily as I incorrectly assumed, this
instruction does use the vector length so we do not have to copy every single
element of the vector. Instead, we need to make sure the vector length is
correctly set.&lt;/p&gt;

&lt;p&gt;The error I saw is that the compiler intended to copy two scalar floating point
registers but because the vector length was different to 1, we were overwriting
more registers than expected (the registers happened to be in banks other than
the first one). That was an interesting bug to find!&lt;/p&gt;

&lt;p&gt;However this creates a bit of a complication here: if we need to change
the vector length to implement a vector copy between registers, we are actually
modifying its value. This means that to be safe we need to preserve the current
vector length, set it to the correct one, do the copy and restore the
original vector length.&lt;/p&gt;

&lt;p&gt;My initial implementation did this, but turns out the code obtained is not very
smart. It may happen that we are already in the right vector length to emit the
copy, so we do not have to do all the preserve-copy-restore dance.&lt;/p&gt;

&lt;p&gt;How to do this in a way that still allows us the option to remove unnecessary
changes to the set vector length?&lt;/p&gt;

&lt;h2&gt;New design&lt;/h2&gt;

&lt;p&gt;Currently we only have a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; pseudo instruction that we are able
to optimise before register allocation.&lt;/p&gt;

&lt;p&gt;Copies are introduced as part of the process that leads register allocation,
when phi instructions are removed. If we want to optimise changes to the vector
length due to copies, we need to run our pass after register allocation.&lt;/p&gt;

&lt;p style=&quot;padding: 0.7em; background-color: bisque;&quot;&gt;
In fact, it would be a good idea to also run it before register allocation, to
reduce the register pressure implicitly created by the redundant instructions.
For simplicity we will only run it after register allocation.
&lt;/p&gt;

&lt;p&gt;So, when emitting copies we will want to know that we are doing the
preserve-copy-restore dance in a way that it can be optimised.&lt;/p&gt;

&lt;p&gt;So I did the following changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENi&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; designates it receives an immediate for the vector length.&lt;/li&gt;
  &lt;li&gt;A new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENr&lt;/code&gt; pseudo instruction that sets the length as preserved in a GPR register (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; means register).&lt;/li&gt;
  &lt;li&gt;A new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPGETLENr&lt;/code&gt; pseudo insruction that returns the vector length in a GPR.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMInstrVFP.td&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -2927,7 +2927,8 @@&lt;/span&gt; let Uses = [FPSCR] in {
   }
 }
 
&lt;span class=&quot;gd&quot;&gt;-// Set LEN field in FPSCR
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+// Set LEN field in FPSCR using an immediate. This is the main way used
+// to change the vector length.
&lt;/span&gt; let Defs = [FPSCR],
     hasNoSchedulingInfo = 1,
     mayLoad = 0,
&lt;span class=&quot;p&quot;&gt;@@ -2935,11 +2936,38 @@&lt;/span&gt; let Defs = [FPSCR],
     hasSideEffects = 0,
     hasPostISelHook = 1,
     Size = 20 in
&lt;span class=&quot;gd&quot;&gt;-def VFPSETLEN : PseudoInst&amp;lt;(outs GPR:$scratch1, GPRnopc:$scratch2),
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+def VFPSETLENi : PseudoInst&amp;lt;(outs GPR:$scratch1, GPRnopc:$scratch2),
&lt;/span&gt;                            (ins imm0_7:$len),
                            IIC_fpSTAT, []&amp;gt;,
                           Requires&amp;lt;[HasVFP2]&amp;gt;;
 
&lt;span class=&quot;gi&quot;&gt;+// This is a semantic version of VMSR which is used to signal
+// a change only to the vector length field. This is not used
+// during ISel.
+let Defs = [FPSCR],
+    hasNoSchedulingInfo = 1,
+    mayLoad = 0,
+    mayStore = 0,
+    hasSideEffects = 0,
+    Size = 4 in
+def VFPSETLENr : PseudoInst&amp;lt;(outs),
+                            (ins GPRnopc:$len),
+                            IIC_fpSTAT, []&amp;gt;,
+                           Requires&amp;lt;[HasVFP2]&amp;gt;;
+
+// This is a semantic version of VMRS which is used to signal
+// we read the vector length. This is not used during ISel.
+let Uses = [FPSCR],
+    hasNoSchedulingInfo = 1,
+    mayLoad = 0,
+    mayStore = 0,
+    hasSideEffects = 0,
+    Size = 4 in
+def VFPGETLENr : PseudoInst&amp;lt;(outs GPRnopc:$len),
+                            (ins),
+                            IIC_fpSTAT, []&amp;gt;,
+                           Requires&amp;lt;[HasVFP2]&amp;gt;;
+
&lt;/span&gt; // Spill and reload helpers.
 let AM = AddrMode4 in {
 let hasNoSchedulingInfo = 1,
&lt;span class=&quot;p&quot;&gt;@@ -3242,4 +3270,4 @@&lt;/span&gt; def : Pat&amp;lt;(fsub_mlx (fmul_su SPRx4:$a, SPRx4:$b), SPRx4:$dstin),
           Requires&amp;lt;[HasVFP2,DontUseNEONForFP,UseFPVMLx]&amp;gt;;
 
 // Set length pattern.
&lt;span class=&quot;gd&quot;&gt;-def : Pat&amp;lt;(arm_vfpsetlenzero), (VFPSETLEN 0)&amp;gt;;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+def : Pat&amp;lt;(arm_vfpsetlenzero), (VFPSETLENi 0)&amp;gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p style=&quot;padding: 0.7em; background-color: bisque;&quot;&gt;
For simplicity &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENr&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPGETLENr&lt;/code&gt; will overwrite the whole &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;
register, but the only change we will ever do is to the vector length so this
should be reasonable. Technically we are changing more bits than the ones we
claim to do, but ARMv6 is not rich enough to do this in an efficient way, hence
the coarser approach.
&lt;/p&gt;

&lt;p&gt;When emitting a copy we will first emit a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPGETLENr&lt;/code&gt; to keep the current
vector length in a GPR (say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rn&lt;/code&gt;). Then we will emit a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENi&lt;/code&gt; to set the
right length of the floating data type (1 for scalars, 2 or 4 for vectors).
Then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmov&lt;/code&gt;. Finally we will emit a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENr&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rn&lt;/code&gt; to restore
everything as it was before the copy.&lt;/p&gt;

&lt;p&gt;Because those are pseudo instructions, we need to expand them at some point:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPGETLENr&lt;/code&gt; will be expanded to a regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmrs&lt;/code&gt; instruction, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENr&lt;/code&gt; will
be expanded to the dual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmsr&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENi&lt;/code&gt; is expanded as usual.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -2991,7 +2991,7 @@&lt;/span&gt; bool ARMExpandPseudo::ExpandMI(MachineBasicBlock &amp;amp;MBB,
       MI.eraseFromParent();
       return true;
     }
&lt;span class=&quot;gd&quot;&gt;-    case ARM::VFPSETLEN: {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    case ARM::VFPSETLENi: {
&lt;/span&gt;       Register Scratch1 = MI.getOperand(0).getReg();
       Register Scratch2 = MI.getOperand(1).getReg();
       DebugLoc dl = MI.getDebugLoc();
&lt;span class=&quot;p&quot;&gt;@@ -3026,6 +3026,27 @@&lt;/span&gt; bool ARMExpandPseudo::ExpandMI(MachineBasicBlock &amp;amp;MBB,
       MI.eraseFromParent();
       return true;
     }
&lt;span class=&quot;gi&quot;&gt;+    case ARM::VFPSETLENr: {
+      // This is a semantic version of VMSR intended only
+      // when changing the vector length.
+      DebugLoc dl = MI.getDebugLoc();
+      Register Length = MI.getOperand(0).getReg();
+      BuildMI(MBB, MBBI, dl, TII-&amp;gt;get(ARM::VMSR))
+          .addUse(Length)
+          .add(predOps(ARMCC::AL));
+      MI.eraseFromParent();
+      return true;
+    }
+    case ARM::VFPGETLENr: {
+      // This is a semantic version of VMRS intended only
+      // when reading the vector length.
+      DebugLoc dl = MI.getDebugLoc();
+      Register Length = MI.getOperand(0).getReg();
+      BuildMI(MBB, MBBI, dl, TII-&amp;gt;get(ARM::VMRS), Length)
+          .add(predOps(ARMCC::AL));
+      MI.eraseFromParent();
+      return true;
+    }
&lt;/span&gt;     case ARM::VFPSPILLDx2: {
       Register Src = MI.getOperand(0).getReg();
       const MachineOperand &amp;amp;Addr = MI.getOperand(1);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using pseudo instructions that have trivial expansions is totally intentional:
we are only using these instructions for copies so we can optimise them.&lt;/p&gt;

&lt;h3&gt;Copies&lt;/h3&gt;

&lt;p&gt;Let’s overhaul copies to be correct.&lt;/p&gt;

&lt;p&gt;There is a bit of complication, that we will not fully address here. In order
to preserve the vector length (via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;) we need extra registers around.
Because the copy expansion happens after register allocation, we cannot enjoy
virtual registers here. So we need to resort to a class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegScavenger&lt;/code&gt;
(the register scavenger) which will try to get us registers for us.&lt;/p&gt;

&lt;p&gt;However, the register scavenger may not be able to find free registers. In that
case we would have to pick victim registers, spill them manually onto the stack
and then use those registers, to finally reload them. A more complete
implementation will have to do this though, or it risks itself to not being
able to compile some codes with high register pressure.&lt;/p&gt;

&lt;p&gt;Another important detail is that not all the copies of floating-point values
need changing the set vector length. If the destination register of the copy
is found in the first bank, the operation is always scalar. This helps with
cases where we are copying scalars (vectors will never be register allocated
in the first bank).&lt;/p&gt;

&lt;p&gt;First let’s remove the wrong code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -979,16 +1068,6 @@&lt;/span&gt; void ARMBaseInstrInfo::copyPhysReg(MachineBasicBlock &amp;amp;MBB,
     Opc = ARM::VMOVS;
     BeginIdx = ARM::ssub_0;
     SubRegs = 2;
&lt;span class=&quot;gd&quot;&gt;-  } else if (ARM::DPRx2RegClass.contains(DestReg, SrcReg) &amp;amp;&amp;amp;
-             Subtarget.hasVFP2Base()) {
-    Opc = ARM::VMOVD;
-    BeginIdx = ARM::dsub_len2_0;
-    SubRegs = 2;
-  } else if (ARM::SPRx4RegClass.contains(DestReg, SrcReg) &amp;amp;&amp;amp;
-             Subtarget.hasVFP2Base()) {
-    Opc = ARM::VMOVS;
-    BeginIdx = ARM::ssub_len4_0;
-    SubRegs = 4;
&lt;/span&gt;   } else if (SrcReg == ARM::CPSR) {
     copyFromCPSR(MBB, I, DestReg, KillSrc, Subtarget);
     return;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s extend the part that deals originally with scalar copies of floating
point values (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPR&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPR&lt;/code&gt; register classes). We will add cases for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPRx4&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx4&lt;/code&gt;. Also we will note the vector length required for each of the
copies.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gi&quot;&gt;+  unsigned VectorLength = 0;
&lt;/span&gt;   unsigned Opc = 0;
   if (SPRDest &amp;amp;&amp;amp; SPRSrc)
     Opc = ARM::VMOVS;
&lt;span class=&quot;p&quot;&gt;@@ -913,10 +991,19 @@&lt;/span&gt; void ARMBaseInstrInfo::copyPhysReg(MachineBasicBlock &amp;amp;MBB,
     Opc = ARM::VMOVSR;
   else if (ARM::DPRRegClass.contains(DestReg, SrcReg) &amp;amp;&amp;amp; Subtarget.hasFP64())
     Opc = ARM::VMOVD;
&lt;span class=&quot;gd&quot;&gt;-  else if (ARM::QPRRegClass.contains(DestReg, SrcReg))
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  else if (ARM::DPRx2RegClass.contains(DestReg, SrcReg) &amp;amp;&amp;amp;
+             Subtarget.hasVFP2Base()) {
+    Opc = ARM::VMOVD;
+    VectorLength = 1;
+  } else if (ARM::SPRx4RegClass.contains(DestReg, SrcReg) &amp;amp;&amp;amp;
+             Subtarget.hasVFP2Base()) {
+    Opc = ARM::VMOVS;
+    VectorLength = 3;
+  } else if (ARM::QPRRegClass.contains(DestReg, SrcReg))
&lt;/span&gt;     Opc = Subtarget.hasNEON() ? ARM::VORRq : ARM::MVE_VORR;
 
   if (Opc) {
&lt;span class=&quot;gi&quot;&gt;+    RAIISetVLEN SetVLEN(Subtarget, this, MBB, I, DestReg, SrcReg, VectorLength);
&lt;/span&gt;     MachineInstrBuilder MIB = BuildMI(MBB, I, DL, get(Opc), DestReg);
     MIB.addReg(SrcReg, getKillRegState(KillSrc));
     if (Opc == ARM::VORRq || Opc == ARM::MVE_VORR)
&lt;span class=&quot;p&quot;&gt;@@ -925,6 +1012,8 @@&lt;/span&gt; void ARMBaseInstrInfo::copyPhysReg(MachineBasicBlock &amp;amp;MBB,
       addUnpredicatedMveVpredROp(MIB, DestReg);
     else
       MIB.add(predOps(ARMCC::AL));
&lt;span class=&quot;gi&quot;&gt;+    if (SetVLEN.isPreserved() &amp;amp;&amp;amp; (Opc == ARM::VMOVD || Opc == ARM::VMOVS))
+      MIB.addReg(ARM::FPSCR, RegState::Implicit);
&lt;/span&gt;     return;
   }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To help us here, we use a new class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAIISetVLEN&lt;/code&gt; which given the registers
being copied and the required &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VectorLength&lt;/code&gt; will emit the proper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPGETLENr&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENi&lt;/code&gt; sequence. We use a RAII pattern because we may have to restore the
vector length using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENr&lt;/code&gt;. If this class tells us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; is being
preserved, we add an explicit usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmov&lt;/code&gt; instruction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RAIISetVLEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MustPreserveFPSCR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMBaseInstrInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SaveFPCSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;RAIISetVLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMSubtarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subtarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMBaseInstrInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;MCRegister&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DestReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MCRegister&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SrcReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VectorLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subtarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasVFP2Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFPReg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MCRegister&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPRRegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DPRRegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inVectorBank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MCRegister&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isVectorReg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MCRegister&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SPRx4RegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DPRx2RegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If this is a scalar register copy, and the destination register happens&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to be in a register bank other than the first, we must preserve fpscr.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFPReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DestReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFPReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SrcReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isVectorBank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DestReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;MustPreserveFPSCR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Vector copies always must preserve fpscr.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVectorReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DestReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isVectorReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SrcReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;MustPreserveFPSCR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MustPreserveFPSCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We have to set FPSCR to length zero for safety.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RegScavenger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enterBasicBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SaveFPCSR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FindUnusedReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPRnopcRegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveFPCSR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoRegister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;report_fatal_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;When emitting a floating point register copy, failed &quot;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;to find a free register&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRegUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveFPCSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FindUnusedReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPRRegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoRegister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;report_fatal_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;When emitting a floating point register copy, failed &quot;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;to find a free register&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRegUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FindUnusedReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPRnopcRegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoRegister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;report_fatal_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;When emitting a floating point register copy, failed &quot;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;to find a free register&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRegUsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDebugLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPGETLENr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SaveFPCSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDebugLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPSETLENi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VectorLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RAIISetVLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MustPreserveFPSCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Restore FPCSR&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDebugLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPSETLENr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveFPCSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPreserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MustPreserveFPSCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the condition cases where the register scavenger would fail to find
a register. A more complete implementation must handle those cases.&lt;/p&gt;

&lt;h3&gt;Optimising&lt;/h3&gt;

&lt;p&gt;As we mentioned above, we want the optimisation pass to run after register
allocation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMTargetMachine.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -513,13 +513,13 @@&lt;/span&gt; void ARMPassConfig::addPreRegAlloc() {
 
     if (!DisableA15SDOptimization)
       addPass(createA15SDOptimizerPass());
&lt;span class=&quot;gd&quot;&gt;-
-    addPass(createARMOptimizeVFP2Len());
&lt;/span&gt;   }
 }
 
 void ARMPassConfig::addPreSched2() {
   if (getOptLevel() != CodeGenOpt::None) {
&lt;span class=&quot;gi&quot;&gt;+    addPass(createARMOptimizeVFP2Len());
+
&lt;/span&gt;     if (EnableARMLoadStoreOpt)
       addPass(createARMLoadStoreOptimizationPass());&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To optimise these new instructions, we have to extend our existing pass. When a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPGETLENr&lt;/code&gt; is seen, we will remember what register is keeping the current
length. If the register is preserved until a further &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENr&lt;/code&gt; we know we
are restoring the same length as before.&lt;/p&gt;

&lt;p&gt;We can use this knowledge when analysing a single basic block, so we do not
lose track of the length value during a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENr&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMOptimizeVFP2Len.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -81,6 +81,12 @@&lt;/span&gt; struct BlockData {
   bool InQueue = false;
 };
 
&lt;span class=&quot;gi&quot;&gt;+struct KeptVFPInfo {
+  Register Reg = ARM::NoRegister;
+  Length Len;
+  MachineInstr *MI = nullptr;
+};
+
&lt;/span&gt; class ARMOptimizeVFP2Len : public MachineFunctionPass {
 private:
   std::vector&amp;lt;BlockData&amp;gt; BlockInfo;
&lt;span class=&quot;p&quot;&gt;@@ -124,27 +124,43 @@&lt;/span&gt; void ARMOptimizeVFP2Len::computeLocalBlockInfo(const MachineBasicBlock &amp;amp;MBB) {
   if (MBB.isEntryBlock())
     LI.InLen.setValue(0);
 
&lt;span class=&quot;gi&quot;&gt;+  KeptVFPInfo KeptVFP;
+
&lt;/span&gt;   LI.OutLen = LI.InLen;
   for (auto &amp;amp;MI : MBB) {
&lt;span class=&quot;gd&quot;&gt;-    if (MI.getOpcode() == ARM::VFPSETLEN) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    if (MI.getOpcode() == ARM::VFPSETLENi) {
&lt;/span&gt;       LI.OutLen.setValue(MI.getOperand(2).getImm());
       LI.LastChange = &amp;amp;MI;
&lt;span class=&quot;gd&quot;&gt;-      continue;
-    }
-
-    // If the FPSCR is modified outside of our control, assume
-    // that it is variable.
-    if (MI.modifiesRegister(ARM::FPSCR) || MI.isInlineAsm()) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    } else if (MI.getOpcode() == ARM::VFPGETLENr) {
+      // This instruction does not change the vector length, but we will note
+      // the register being written because these are usually paired with
+      // VFPSETLENr.
+      KeptVFP.Reg = MI.getOperand(0).getReg();
+      KeptVFP.Len = LI.OutLen;
+    } else if (MI.getOpcode() == ARM::VFPSETLENr) {
+      // If we are restoring a previously kept vector length, we can also
+      // restore the known vector length.
+      if (KeptVFP.Reg == MI.getOperand(0).getReg()) {
+        LI.OutLen = KeptVFP.Len;
+      } else {
+        LI.OutLen.setVariable();
+      }
+      LI.LastChange = &amp;amp;MI;
+    } else if (MI.modifiesRegister(ARM::FPSCR) || MI.isInlineAsm()) {
+      // If the FPSCR is modified outside of our control, assume
+      // that it is variable.
&lt;/span&gt;       LI.OutLen.setVariable();
       LI.LastChange = &amp;amp;MI;
&lt;span class=&quot;gd&quot;&gt;-      continue;
-    }
-
-    if (MI.isCall()) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    } else if (MI.isCall()) {
&lt;/span&gt;       // On exit, functions restore vector length == 1.
       LI.OutLen.setValue(0);
       LI.LastChange = &amp;amp;MI;
&lt;span class=&quot;gd&quot;&gt;-      continue;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    }
+
+    if (MI.getOpcode() != ARM::VFPGETLENr &amp;amp;&amp;amp; KeptVFP.Reg != ARM::NoRegister &amp;amp;&amp;amp;
+        MI.modifiesRegister(KeptVFP.Reg)) {
+      // If this instruction modifies the GPR holding a vector length, reset it.
+      KeptVFP.Reg = ARM::NoRegister;
&lt;/span&gt;     }
   }
 }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then use this in the removal as well.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMOptimizeVFP2Len.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -225,25 +241,61 @@&lt;/span&gt; bool ARMOptimizeVFP2Len::removeRedundantVPFSETLEN(MachineBasicBlock &amp;amp;MBB) {
 
   bool Changed = false;
   MachineBasicBlock::iterator MBBI = MBB.begin(), E = MBB.end();
&lt;span class=&quot;gi&quot;&gt;+
+  KeptVFPInfo KeptVFP;
+
&lt;/span&gt;   while (MBBI != E) {
     MachineBasicBlock::iterator NMBBI = std::next(MBBI);
     MachineInstr &amp;amp;MI = *MBBI;
 
&lt;span class=&quot;gd&quot;&gt;-    if (MI.getOpcode() == ARM::VFPSETLEN) {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    bool Remove = false;
+
+    if (MI.getOpcode() == ARM::VFPSETLENi) {
&lt;/span&gt;       unsigned Length = MI.getOperand(2).getImm();
       if (CurrentLength.hasValue() &amp;amp;&amp;amp; CurrentLength.getValue() == Length) {
         LLVM_DEBUG(dbgs() &amp;lt;&amp;lt; &quot;Removing redundant: &quot; &amp;lt;&amp;lt; MI);
         // We can remove this one.
&lt;span class=&quot;gd&quot;&gt;-        MI.removeFromParent();
-        Changed = true;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        Remove = true;
&lt;/span&gt;       }
       CurrentLength.setValue(Length);
&lt;span class=&quot;gi&quot;&gt;+    } else if (MI.getOpcode() == ARM::VFPSETLENr) {
+      if (KeptVFP.Reg == MI.getOperand(0).getReg()) {
+        if (CurrentLength.hasValue() &amp;amp;&amp;amp; KeptVFP.Len.hasValue() &amp;amp;&amp;amp;
+            CurrentLength == KeptVFP.Len) {
+          // This is restoring to the same length we kept in an earlier
+          // VFPGETLENr, so we can remove this instruction.
+          Remove = true;
+          // If the register is killed here, also remove its last generator
+          // which we know it is a VFPGETLENi).
+          assert(KeptVFP.MI &amp;amp;&amp;amp; KeptVFP.MI-&amp;gt;getOpcode() == ARM::VFPGETLENr);
+          if (MI.getOperand(0).isKill()) {
+            KeptVFP.MI-&amp;gt;removeFromParent();
+          }
+        }
+        CurrentLength = KeptVFP.Len;
+      } else {
+        CurrentLength.setVariable();
+      }
+    } else if (MI.getOpcode() == ARM::VFPGETLENr) {
+      KeptVFP.Reg = MI.getOperand(0).getReg();
+      KeptVFP.Len = CurrentLength;
+      KeptVFP.MI = &amp;amp;MI;
&lt;/span&gt;     } else if (MI.modifiesRegister(ARM::FPSCR) || MI.isInlineAsm()) {
       CurrentLength.setVariable();
     } else if (MI.isCall()) {
       CurrentLength.setValue(0);
     }
 
&lt;span class=&quot;gi&quot;&gt;+    if (Remove) {
+      MI.removeFromParent();
+      Changed = true;
+    } else if (MI.getOpcode() != ARM::VFPGETLENr &amp;amp;&amp;amp;
+               KeptVFP.Reg != ARM::NoRegister &amp;amp;&amp;amp;
+               MI.modifiesRegister(KeptVFP.Reg)) {
+      // If this instruction modifies the GPR holding a vector length, reset it.
+      KeptVFP.Reg = ARM::NoRegister;
+    }
+
&lt;/span&gt;     MBBI = NMBBI;
   }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;Results&lt;/h2&gt;

&lt;p&gt;With all the changes above in place, we can retake the example of copies from
the last chapter and see the code we emit now.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;t_doubles_phi.ll&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%dis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;icmp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;slt&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%dis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block2&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;block1:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block3&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;block2:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fmul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block3&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;block3:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - t_doubles_phi.ll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_vec:
	.fnstart
@ %bb.0:                                @ %block3
	vpush	{d8, d9}
	vldmia	r1, {d8, d9}
	mov	r1, #65536
	cmp	r0, #4
	vldmia	r2, {d4, d5}
	vmrs	r2, fpscr
	bic	r2, r2, #458752
	orr	r2, r2, r1
	vmsr	fpscr, r2
	vmul.f64	d6, d8, d4
	vadd.f64	d4, d8, d4
	vmovge.f64	d4, d6
	vstmia	r3, {d4, d5}
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	vmsr	fpscr, r1
	vpop	{d8, d9}
	bx	lr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is really good as the branch is now gone.&lt;/p&gt;

&lt;p&gt;We have to look at the MIR to understand what happened. First let’s see the MIR
right before the optimisation pass.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - t_doubles_phi.ll &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;-print-before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm-optimize-vfp2-len&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;bb.0.block3:
  successors: %bb.2(0x40000000), %bb.1(0x40000000); %bb.2(50.00%), %bb.1(50.00%)
  liveins: $r0, $r1, $r2, $r3, $d8, $d9
  $sp = frame-setup VSTMDDB_UPD $sp(tied-def 0), 14, $noreg, killed $d8, killed $d9
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $d9, -8
  frame-setup CFI_INSTRUCTION offset $d8, -16
  renamable $d4 = VLDRD renamable $r2, 0, 14, $noreg, implicit-def $d4_d5x2 :: (load 8 from %ir.pb)
  renamable $d5 = VLDRD killed renamable $r2, 2, 14, $noreg, implicit killed $d4_d5x2, implicit-def $d4_d5x2 :: (load 8 from %ir.pb + 8)
  renamable $d8 = VLDRD renamable $r1, 0, 14, $noreg, implicit-def $d8_d9x2 :: (load 8 from %ir.pa)
  renamable $d9 = VLDRD killed renamable $r1, 2, 14, $noreg, implicit killed $d8_d9x2, implicit-def $d8_d9x2 :: (load 8 from %ir.pa + 8)
  dead renamable $r1, dead renamable $r2 = VFPSETLENi 1, implicit-def $fpscr
  renamable $d6_d7x2 = VMULDx2 renamable $d8_d9x2, renamable $d4_d5x2, 14, $noreg, implicit $fpscr
  renamable $d4_d5x2 = VADDDx2 killed renamable $d8_d9x2, killed renamable $d4_d5x2, 14, $noreg, implicit $fpscr
  CMPri killed renamable $r0, 4, 14, $noreg, implicit-def $cpsr
  Bcc %bb.2, 11, killed $cpsr

bb.1.select.false:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $r3, $d6_d7x2
  $r0 = VFPGETLENr implicit $fpscr
  dead $r1, dead $r2 = VFPSETLENi 1, implicit-def $fpscr
  $d4_d5x2 = VMOVD killed $d6_d7x2, 14, $noreg, implicit $fpscr
  VFPSETLENr killed $r0, implicit-def $fpscr

bb.2.select.end:
; predecessors: %bb.0, %bb.1
  liveins: $r3, $d4_d5x2
  VSTRD renamable $d4, renamable $r3, 0, 14, $noreg :: (store 8 into %ir.pc)
  VSTRD renamable $d5, killed renamable $r3, 2, 14, $noreg, implicit killed $d4_d5x2 :: (store 8 into %ir.pc + 8)
  dead renamable $r0, dead renamable $r1 = VFPSETLENi 0, implicit-def $fpscr
  $sp = frame-destroy VLDMDIA_UPD $sp(tied-def 0), 14, $noreg, def $d8, def $d9
  BX_RET 14, $noreg
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Before the optimisation, our MIR looks like this. In lines 22 to 25 above, we
see all the dance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPGETLENr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENi&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note in line 12 above we have already set the vector length to 2 (like we do in
line 23), so we should be able to reuse this.&lt;/p&gt;

&lt;p&gt;Let’s look now at the MIR after the optimiation pas.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - t_doubles_phi.ll &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;-print-after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm-optimize-vfp2-len&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;bb.0.block3:
  successors: %bb.2(0x40000000), %bb.1(0x40000000); %bb.2(50.00%), %bb.1(50.00%)
  liveins: $r0, $r1, $r2, $r3, $d8, $d9
  $sp = frame-setup VSTMDDB_UPD $sp(tied-def 0), 14, $noreg, killed $d8, killed $d9
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $d9, -8
  frame-setup CFI_INSTRUCTION offset $d8, -16
  renamable $d4 = VLDRD renamable $r2, 0, 14, $noreg, implicit-def $d4_d5x2 :: (load 8 from %ir.pb)
  renamable $d5 = VLDRD killed renamable $r2, 2, 14, $noreg, implicit killed $d4_d5x2, implicit-def $d4_d5x2 :: (load 8 from %ir.pb + 8)
  renamable $d8 = VLDRD renamable $r1, 0, 14, $noreg, implicit-def $d8_d9x2 :: (load 8 from %ir.pa)
  renamable $d9 = VLDRD killed renamable $r1, 2, 14, $noreg, implicit killed $d8_d9x2, implicit-def $d8_d9x2 :: (load 8 from %ir.pa + 8)
  dead renamable $r1, dead renamable $r2 = VFPSETLENi 1, implicit-def $fpscr
  renamable $d6_d7x2 = VMULDx2 renamable $d8_d9x2, renamable $d4_d5x2, 14, $noreg, implicit $fpscr
  renamable $d4_d5x2 = VADDDx2 killed renamable $d8_d9x2, killed renamable $d4_d5x2, 14, $noreg, implicit $fpscr
  CMPri killed renamable $r0, 4, 14, $noreg, implicit-def $cpsr
  Bcc %bb.2, 11, killed $cpsr

bb.1.select.false:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $r3, $d6_d7x2
  $d4_d5x2 = VMOVD killed $d6_d7x2, 14, $noreg, implicit $fpscr

bb.2.select.end:
; predecessors: %bb.0, %bb.1
  liveins: $r3, $d4_d5x2
  VSTRD renamable $d4, renamable $r3, 0, 14, $noreg :: (store 8 into %ir.pc)
  VSTRD renamable $d5, killed renamable $r3, 2, 14, $noreg, implicit killed $d4_d5x2 :: (store 8 into %ir.pc + 8)
  dead renamable $r0, dead renamable $r1 = VFPSETLENi 0, implicit-def $fpscr
  $sp = frame-destroy VLDMDIA_UPD $sp(tied-def 0), 14, $noreg, def $d8, def $d9
  BX_RET 14, $noreg
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The optimisation pass identifies the unnecessary change so we can reuse the existing
vector length. Now line 22 is the only instruction required to do the copy.&lt;/p&gt;

&lt;p&gt;A later existing pass of the ARM backend identifies this pattern and adds the
predicate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmov&lt;/code&gt; (which becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmovge&lt;/code&gt;).&lt;/p&gt;

&lt;p style=&quot;padding: 0.7em; background-color: bisque;&quot;&gt;
A bit of reflection with the current approach.  We have gone through register
allocation with instructions that we have later removed. This means that
potentially those instructions may have increased the register pressure to the
rest of the code.  Unfortunately the expansion currently happens after register
allocation (though there are a couple of target-specific hooks that might be
worth looking into) so there is not much we can do for now.
&lt;/p&gt;

&lt;p&gt;Now I think we can move onto enabling vectorization :)&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><summary type="html">In the last installment I mentioned we could start looking at enabling the vectoriser in the compiler. However when I did that I realised some benchmarks were giving weird results. I had made a mistake with copies, so let’s remediate this.</summary></entry><entry><title type="html">Fun with vectors in the Raspberry Pi 1 - Part 7</title><link href="https://thinkingeek.com/2021/07/31/raspberry-vectors-part-7/" rel="alternate" type="text/html" title="Fun with vectors in the Raspberry Pi 1 - Part 7" /><published>2021-07-31T08:59:00+00:00</published><updated>2021-07-31T08:59:00+00:00</updated><id>https://thinkingeek.com/2021/07/31/raspberry-vectors-part-7</id><content type="html" xml:base="https://thinkingeek.com/2021/07/31/raspberry-vectors-part-7/">&lt;p&gt;We finished the last installment of this series mentioning that the compiler
cannot copy, load or store a vector. Today we will address this.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Spill code and copies&lt;/h2&gt;

&lt;p&gt;LLVM, like many other compiler infrastructures, uses the concept of &lt;em&gt;virtual
register&lt;/em&gt;. Virtual registers are abstractions over the &lt;em&gt;physical&lt;/em&gt; registers
available in an architecture (note to architects: &lt;em&gt;physical&lt;/em&gt; registers in
compilers means &lt;em&gt;architectural&lt;/em&gt; registers, not &lt;em&gt;renaming&lt;/em&gt; registers).&lt;/p&gt;

&lt;p&gt;During code generation in Machine IR (MIR), LLVM can combine the concept of
virtual register with that of Static Single Assignment (SSA). This is very
convenient for optimisations and transformations that happen on MIR.&lt;/p&gt;

&lt;p&gt;The number of virtual registers is unbounded. However the number of physical
registers available in a register-based architecture is finite. There is a
process called &lt;em&gt;register allocation&lt;/em&gt; that assigns a physical register to every
virtual registers. Due to the finiteness of the physical registers, register
allocation may run out of available physical registers. In these cases the
compiler has to emit &lt;em&gt;spill code&lt;/em&gt; in which a physical register already in use
is preserved temporarily in some other memory, typically the stack of the
program. The details are a bit complex at this point but we only need to
know that saving a register on that memory is typically called &lt;em&gt;spill&lt;/em&gt; and
restoring it afterwards is called a &lt;em&gt;reload&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There is another case where LLVM will emit spill code. Calling conventions can
require registers be preserved around function calls or upon entry/exit of a
function. While these are not considered spill code in the traditional sense,
LLVM combines the two cases.&lt;/p&gt;

&lt;p&gt;Before register allocation can run, however, SSA form must be removed. The
fundamentals of SSA is that every virtual register in the program must be
defined only once and can be used many times. However we quickly run into the
issue that the value of a virtual register may depend on control flow. Consider
a program thas uses a variable whose value may have conditionally changed in an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement. SSA represents those &lt;em&gt;converging&lt;/em&gt; values due to control flow
using &lt;em&gt;phi&lt;/em&gt; instructions. Phi instructions are not executable, they are an
abstraction, and must be removed.  Without going into much detail, when
removing phi operations, the compiler will introduce copies to implement the
semantics of the phi instruction. It may not be obvious, but it is precisely
this insertion of copies what destroys the SSA property of the code: a same
virtual register will be defined by different instructions.&lt;/p&gt;

&lt;h2&gt;Load and store&lt;/h2&gt;

&lt;p&gt;There are a couple of functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storeRegToStackSlot&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadRegFromStackSlot&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp&lt;/code&gt;
responsible for emitting the machine instruction used to spill and reload
respectively. One issue here is that only one instruction is allowed due to
expectations in the spilling functions used by the register allocator.&lt;/p&gt;

&lt;p&gt;Ideally we would like to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vstmdia&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vstmsia&lt;/code&gt; for double and floating
point stores respectively.  Similarly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vldmdia&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vldmsia&lt;/code&gt; for loads. However
these instructions expect a contiguous range of registers. We allow
representing vectors over non-contiguous registers wrapping around in the same
vector bank (say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d7&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d4&lt;/code&gt;). Also LLVM comes with a limitation here: we
must use a single instruction for the spill and reload.&lt;/p&gt;

&lt;p&gt;We can address this, again, using pseudo-instructions that we will lower in the
best way possible. First we will define two pseudo-instructions, one for each
vector type, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSPILL&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPRELOAD&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMInstrVFP.td&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -2934,6 +2934,34 @@&lt;/span&gt; def VFPSETLEN : PseudoInst&amp;lt;(outs GPR:$scratch1, GPRnopc:$scratch2),
                            IIC_fpSTAT, []&amp;gt;,
                           Requires&amp;lt;[HasVFP2]&amp;gt;;
 
&lt;span class=&quot;gi&quot;&gt;+// Spill and reload helpers.
+let AM = AddrMode4 in {
+let hasNoSchedulingInfo = 1,
+    mayLoad = 0,
+    mayStore = 1 in
+def VFPSPILLDx2 : PseudoInst&amp;lt;(outs), (ins DPRx2:$Dm, GPR:$Rn),
+                             IIC_fpStore64, []&amp;gt;,
+                            Requires&amp;lt;[HasVFP2]&amp;gt;;
+let hasNoSchedulingInfo = 1,
+    mayLoad = 1,
+    mayStore = 0 in
+def VFPRELOADDx2 : PseudoInst&amp;lt;(outs DPRx2:$Dd), (ins GPR:$Rn),
+                              IIC_fpLoad64, []&amp;gt;,
+                             Requires&amp;lt;[HasVFP2]&amp;gt;;
+let hasNoSchedulingInfo = 1,
+    mayLoad = 0,
+    mayStore = 1 in
+def VFPSPILLSx4 : PseudoInst&amp;lt;(outs), (ins SPRx4:$Dm, GPR:$Rn),
+                             IIC_fpStore64, []&amp;gt;,
+                            Requires&amp;lt;[HasVFP2]&amp;gt;;
+let hasNoSchedulingInfo = 1,
+    mayLoad = 1,
+    mayStore = 0 in
+def VFPRELOADSx4 : PseudoInst&amp;lt;(outs SPRx4:$Dd), (ins GPR:$Rn),
+                              IIC_fpLoad64, []&amp;gt;,
+                             Requires&amp;lt;[HasVFP2]&amp;gt;;
+}
+
&lt;/span&gt; // Computation: LEN=2
 let usesCustomInserter = 1 in {
 let VectorLength = 0b001 in {&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can extend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storeRegToStackSlot&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadRegFromStackSlot&lt;/code&gt; so they
emit these instructions when we have to store/load a register of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPRx4&lt;/code&gt; register classes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -1213,6 +1223,18 @@&lt;/span&gt; storeRegToStackSlot(MachineBasicBlock &amp;amp;MBB, MachineBasicBlock::iterator I,
           .addImm(0)
           .addMemOperand(MMO);
         addUnpredicatedMveVpredNOp(MIB);
&lt;span class=&quot;gi&quot;&gt;+      } else if (ARM::DPRx2RegClass.hasSubClassEq(RC) &amp;amp;&amp;amp;
+                 Subtarget.hasVFP2Base()) {
+        BuildMI(MBB, I, DebugLoc(), get(ARM::VFPSPILLDx2))
+            .addReg(SrcReg, getKillRegState(isKill))
+            .addFrameIndex(FI)
+            .addMemOperand(MMO);
+      } else if (ARM::SPRx4RegClass.hasSubClassEq(RC) &amp;amp;&amp;amp;
+                 Subtarget.hasVFP2Base()) {
+        BuildMI(MBB, I, DebugLoc(), get(ARM::VFPSPILLSx4))
+            .addReg(SrcReg, getKillRegState(isKill))
+            .addFrameIndex(FI)
+            .addMemOperand(MMO);
&lt;/span&gt;       } else
         llvm_unreachable(&quot;Unknown reg class!&quot;);
       break;
&lt;span class=&quot;p&quot;&gt;@@ -1451,6 +1473,16 @@&lt;/span&gt; loadRegFromStackSlot(MachineBasicBlock &amp;amp;MBB, MachineBasicBlock::iterator I,
         .addImm(0)
         .addMemOperand(MMO);
       addUnpredicatedMveVpredNOp(MIB);
&lt;span class=&quot;gi&quot;&gt;+    } else if (ARM::DPRx2RegClass.hasSubClassEq(RC) &amp;amp;&amp;amp;
+               Subtarget.hasVFP2Base()) {
+      BuildMI(MBB, I, DL, get(ARM::VFPRELOADDx2), DestReg)
+          .addFrameIndex(FI)
+          .addMemOperand(MMO);
+    } else if (ARM::SPRx4RegClass.hasSubClassEq(RC) &amp;amp;&amp;amp;
+               Subtarget.hasVFP2Base()) {
+      BuildMI(MBB, I, DL, get(ARM::VFPRELOADSx4), DestReg)
+          .addFrameIndex(FI)
+          .addMemOperand(MMO);
&lt;/span&gt;     } else
       llvm_unreachable(&quot;Unknown reg class!&quot;);
     break;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, we basically encapsulate the destination register along with
the abstraction of the stack, called &lt;em&gt;frame index&lt;/em&gt; in LLVM. Finally we make
sure the memory operands are there: these are extra bits of information LLVM
can use to reason about memory accesses.&lt;/p&gt;

&lt;h3&gt;Lowering&lt;/h3&gt;

&lt;p&gt;Those pseudo instructions will need some lowering. Again this happens in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMExpandPseudoInsts.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our strategy will be fairly simple. If we can use the multiple memory access
instructions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vldmdia&lt;/code&gt;/  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vldmsia&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vstmdia&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vstmsia&lt;/code&gt; we will use them. If
we cannot we will emit a bunch of simple loads and stores.&lt;/p&gt;

&lt;p&gt;Note that for doubles this would be enough because vectors only have two
elements. For vectors of floats, though, there are more cases: a) all four
registers may be consecutive (e.g.: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s8&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s9&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s10&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s11&lt;/code&gt;) three are
consecutive (e.g.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s13&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s14&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s15&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s8&lt;/code&gt;), c) two are consecutive and the
two other are consecutive but not respect to the other two (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s14&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s15&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s8&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s9&lt;/code&gt;).  For simplicity we will ignore those cases but they are not too
conceptually difficult to implement.&lt;/p&gt;

&lt;p&gt;We will see the implementation for double vectors, float vectors would be
implemented in a similar way. We first check if the registers are
consecutive. If they are then we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vldmdia&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vstmdia&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If they are not consecutive then we need to emit explicit loads and stores
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vldrd&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vstrd&lt;/code&gt;. Some complexity comes in the form of computing the right
memory operand for the new loads and stores as we need to adjust the right
offset and size of data being accessed. This is encapsulated in convenient
lambdas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EmitLoad&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EmitStore&lt;/code&gt;. One important thing to note is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vldrd&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vstrd&lt;/code&gt; instructions expect an offset operand in units of 4 bytes, hence
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.addImm(Offset / 4)&lt;/code&gt;. In the memory operand though, the offset is specified in
bytes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -3026,6 +3026,173 @@&lt;/span&gt; bool ARMExpandPseudo::ExpandMI(MachineBasicBlock &amp;amp;MBB,
       MI.eraseFromParent();
       return true;
     }
&lt;span class=&quot;gi&quot;&gt;+    case ARM::VFPSPILLDx2: {
+      Register Src = MI.getOperand(0).getReg();
+      const MachineOperand &amp;amp;Addr = MI.getOperand(1);
+      DebugLoc dl = MI.getDebugLoc();
+
+      Register Src0 = TRI-&amp;gt;getSubReg(Src, ARM::dsub_len2_0);
+      Register Src1 = TRI-&amp;gt;getSubReg(Src, ARM::dsub_len2_1);
+
+      if (Src0 + 1 == Src1) {
+        // Use vstmdia.
+        BuildMI(MBB, MBBI, dl, TII-&amp;gt;get(ARM::VSTMDIA))
+            .add(Addr)
+            .add(predOps(ARMCC::AL))
+            .cloneMemRefs(MI)
+            .addReg(Src0, getKillRegState(MI.getOperand(1).isKill()))
+            .addReg(Src1);
+      } else {
+        assert(MI.hasOneMemOperand() &amp;amp;&amp;amp; &quot;Need one memoperand&quot;);
+        const MachineMemOperand *MMO = *MI.memoperands_begin();
+        MachineFunction *MF = MBB.getParent();
+
+        auto EmitStore = [&amp;amp;](Register RegSrc, uint64_t Offset) {
+          MachineMemOperand *NewMMO = MF-&amp;gt;getMachineMemOperand(
+              MMO-&amp;gt;getPointerInfo().getWithOffset(Offset),
+              MachineMemOperand::MOStore, MMO-&amp;gt;getSize() / 2, MMO-&amp;gt;getAlign());
+          BuildMI(MBB, MBBI, dl, TII-&amp;gt;get(ARM::VSTRD))
+              .addReg(RegSrc)
+              .add(Addr)
+              .addImm(Offset / 4)
+              .addMemOperand(NewMMO)
+              .add(predOps(ARMCC::AL));
+        };
+
+        EmitStore(Src0, 0);
+        EmitStore(Src1, 8);
+      }
+      MI.eraseFromParent();
+      return true;
+    }
+    case ARM::VFPRELOADDx2: {
+      Register Dest = MI.getOperand(0).getReg();
+      const MachineOperand &amp;amp;Addr = MI.getOperand(1);
+      DebugLoc dl = MI.getDebugLoc();
+
+      Register Dest0 = TRI-&amp;gt;getSubReg(Dest, ARM::dsub_len2_0);
+      Register Dest1 = TRI-&amp;gt;getSubReg(Dest, ARM::dsub_len2_1);
+
+      if (Dest0 + 1 == Dest1) {
+        // Use vldmdia.
+        BuildMI(MBB, MBBI, dl, TII-&amp;gt;get(ARM::VLDMDIA))
+            .add(Addr)
+            .cloneMemRefs(MI)
+            .add(predOps(ARMCC::AL))
+            .addReg(Dest0, RegState::DefineNoRead)
+            .addReg(Dest1, RegState::DefineNoRead);
+      } else {
+        assert(MI.hasOneMemOperand() &amp;amp;&amp;amp; &quot;Need one memoperand&quot;);
+        const MachineMemOperand *MMO = *MI.memoperands_begin();
+        MachineFunction *MF = MBB.getParent();
+
+        auto EmitLoad = [&amp;amp;](Register RegDst, uint64_t Offset) {
+          MachineMemOperand *NewMMO = MF-&amp;gt;getMachineMemOperand(
+              MMO-&amp;gt;getPointerInfo().getWithOffset(Offset),
+              MachineMemOperand::MOLoad, MMO-&amp;gt;getSize() / 2, MMO-&amp;gt;getAlign());
+          BuildMI(MBB, MBBI, dl, TII-&amp;gt;get(ARM::VLDRD), Dest0)
+              .add(Addr)
+              .addImm(Offset / 4)
+              .addMemOperand(NewMMO)
+              .add(predOps(ARMCC::AL));
+        };
+
+        EmitLoad(Dest0, 0);
+        EmitLoad(Dest1, 8);
+      }
+      MI.eraseFromParent();
+      return true;
+    }
&lt;/span&gt;   }
 }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Results&lt;/h3&gt;

&lt;p&gt;Let’s see this in action. In the last installment we said that doing a call
while vectors were live caused the compiler to crash because
it does not know how to spill and reload the vectors.&lt;/p&gt;

&lt;p&gt;An example of LLVM IR that triggers this behaviour is this one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;test.ll&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - test.ll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_vec:
	.fnstart
@ %bb.0:
	push	{r4, r5, r6, lr}
	sub	sp, sp, #32
	add	lr, sp, #16
	vldmia	r1, {d4, d5}
	mov	r1, #3
	mov	r4, r2
	vstmia	lr, {d4, d5}                    @ 16-byte Spill
	vldmia	r0, {d4, d5}
	mov	r0, #1
	vstmia	sp, {d4, d5}                    @ 16-byte Spill
	bl	foo
	vmrs	r1, fpscr
	mov	r0, #65536
	add	lr, sp, #16
	bic	r1, r1, #458752
	orr	r1, r1, r0
	vmsr	fpscr, r1
	vldmia	lr, {d4, d5}                    @ 16-byte Reload
	vldmia	sp, {d6, d7}                    @ 16-byte Reload
	vadd.f64	d4, d6, d4
	vstmia	r4, {d4, d5}
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	vmsr	fpscr, r1
	add	sp, sp, #32
	pop	{r4, r5, r6, pc}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we can see how the compiler explicitly spills and reloads vectors around
the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;. Note that the spills have as source the same pair &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d4&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d5&lt;/code&gt;
because the compiler does not need another pair in that position. However, the
reloads do have to use different pairs otherwise the addition (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vadd.f64&lt;/code&gt;) will
not be possible.&lt;/p&gt;

&lt;p&gt;It is a bit difficult to observe the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vstrd&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vldrd&lt;/code&gt; for the
non-consecutive case. One thing we can do is manually modifying the Machine IR so
it uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d7&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d4&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d4&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d5&lt;/code&gt;. To get the Machine IR, we must stop
before finishing the code generation pipeline. A location that seems convenient
is stopping before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm-ldst-opt&lt;/code&gt; pass, responsible for optimising
several memory accesses into multiple memory accesses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; test.mir &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;-stop-before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm-ldst-opt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.mir&lt;/code&gt; file like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -90,23 +90,23 @@&lt;/span&gt; body:             |
     $sp = frame-setup SUBri killed $sp, 32, 14 /* CC::al */, $noreg, $noreg
     frame-setup CFI_INSTRUCTION def_cfa_offset 48
     $r4 = MOVr $r2, 14 /* CC::al */, $noreg, $noreg
&lt;span class=&quot;gd&quot;&gt;-    renamable $d4 = VLDRD renamable $r1, 0, 14 /* CC::al */, $noreg, implicit-def $d4_d5x2 :: (load 8 from %ir.pb)
-    renamable $d5 = VLDRD killed renamable $r1, 2, 14 /* CC::al */, $noreg, implicit killed $d4_d5x2, implicit-def $d4_d5x2 :: (load 8 from %ir.pb + 8)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    renamable $d7 = VLDRD renamable $r1, 0, 14 /* CC::al */, $noreg, implicit-def $d7_d4x2 :: (load 8 from %ir.pb)
+    renamable $d4 = VLDRD killed renamable $r1, 2, 14 /* CC::al */, $noreg, implicit killed $d7_d4x2, implicit-def $d7_d4x2 :: (load 8 from %ir.pb + 8)
&lt;/span&gt;     $lr = ADDri killed $sp, 16, 14 /* CC::al */, $noreg, $noreg
&lt;span class=&quot;gd&quot;&gt;-    VFPSPILLDx2 killed renamable $d4_d5x2, killed $lr :: (store 16 into %stack.0, align 8)
-    renamable $d4 = VLDRD renamable $r0, 0, 14 /* CC::al */, $noreg, implicit-def $d4_d5x2 :: (load 8 from %ir.pa)
-    renamable $d5 = VLDRD killed renamable $r0, 2, 14 /* CC::al */, $noreg, implicit killed $d4_d5x2, implicit-def $d4_d5x2 :: (load 8 from %ir.pa + 8)
-    VFPSPILLDx2 killed renamable $d4_d5x2, $sp :: (store 16 into %stack.1, align 8)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    VFPSPILLDx2 killed renamable $d7_d4x2, killed $lr :: (store 16 into %stack.0, align 8)
+    renamable $d7 = VLDRD renamable $r0, 0, 14 /* CC::al */, $noreg, implicit-def $d7_d4x2 :: (load 8 from %ir.pa)
+    renamable $d4 = VLDRD killed renamable $r0, 2, 14 /* CC::al */, $noreg, implicit killed $d7_d4x2, implicit-def $d7_d4x2 :: (load 8 from %ir.pa + 8)
+    VFPSPILLDx2 killed renamable $d7_d4x2, $sp :: (store 16 into %stack.1, align 8)
&lt;/span&gt;     $r0 = MOVi 1, 14 /* CC::al */, $noreg, $noreg
     $r1 = MOVi 3, 14 /* CC::al */, $noreg, $noreg
     BL @foo, csr_aapcs, implicit-def dead $lr, implicit $sp, implicit $r0, implicit $r1, implicit-def $sp
     dead renamable $r0, dead renamable $r1 = VFPSETLEN 1, implicit-def $fpscr
     $lr = ADDri killed $sp, 16, 14 /* CC::al */, $noreg, $noreg
&lt;span class=&quot;gd&quot;&gt;-    renamable $d4_d5x2 = VFPRELOADDx2 killed $lr :: (load 16 from %stack.0, align 8)
-    renamable $d6_d7x2 = VFPRELOADDx2 $sp :: (load 16 from %stack.1, align 8)
-    renamable $d4_d5x2 = VADDDx2 killed renamable $d6_d7x2, killed renamable $d4_d5x2, 14 /* CC::al */, $noreg, implicit $fpscr
-    VSTRD renamable $d4, renamable $r4, 0, 14 /* CC::al */, $noreg :: (store 8 into %ir.pc)
-    VSTRD renamable $d5, killed renamable $r4, 2, 14 /* CC::al */, $noreg, implicit killed $d4_d5x2 :: (store 8 into %ir.pc + 8)
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    renamable $d7_d4x2 = VFPRELOADDx2 killed $lr :: (load 16 from %stack.0, align 8)
+    renamable $d8_d9x2 = VFPRELOADDx2 $sp :: (load 16 from %stack.1, align 8)
+    renamable $d7_d4x2 = VADDDx2 killed renamable $d8_d9x2, killed renamable $d7_d4x2, 14 /* CC::al */, $noreg, implicit $fpscr
+    VSTRD renamable $d7, renamable $r4, 0, 14 /* CC::al */, $noreg :: (store 8 into %ir.pc)
+    VSTRD renamable $d4, killed renamable $r4, 2, 14 /* CC::al */, $noreg, implicit killed $d7_d4x2 :: (store 8 into %ir.pc + 8)
&lt;/span&gt;     dead renamable $r0, dead renamable $r1 = VFPSETLEN 0, implicit-def $fpscr
     $sp = frame-destroy ADDri killed $sp, 32, 14 /* CC::al */, $noreg, $noreg
     $sp = frame-destroy LDMIA_RET $sp, 14 /* CC::al */, $noreg, def $r4, def $r5, def $r6, def $pc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The diff is a bit noisy: occurrences of physical registers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d6_d7x2&lt;/code&gt; are
replaced with the physical register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d8_d9x2&lt;/code&gt; and occurrences of the physical
register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d4_d5x2&lt;/code&gt; are replaced with the physical register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d7_d4x2&lt;/code&gt;. This
register is non-contiguous.&lt;/p&gt;

&lt;p&gt;Now we can restart the code generation pipeline using the modified Machine IR
file, right before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm-ldst-opt&lt;/code&gt; (note the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-start-before&lt;/code&gt; flag).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; llc -mtriple armv6kz-unknown-linux-gnu -mattr=+vfp2  -o - test.mir \
      -start-before=arm-ldst-opt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the output looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_vec:
	.fnstart
@ %bb.0:
	push	{r4, r5, r6, lr}
	sub	sp, sp, #32
	vldr	d7, [r1]
	add	lr, sp, #16
	vldr	d4, [r1, #8]
	mov	r1, #3
	vstr	d7, [lr]                        @ 8-byte Spill
	mov	r4, r2
	vstr	d4, [lr, #8]                    @ 8-byte Spill
	vldr	d7, [r0]
	vldr	d4, [r0, #8]
	mov	r0, #1
	vstr	d7, [sp]                        @ 8-byte Spill
	vstr	d4, [sp, #8]                    @ 8-byte Spill
	bl	foo
	vmrs	r1, fpscr
	mov	r0, #65536
	add	lr, sp, #16
	bic	r1, r1, #458752
	orr	r1, r1, r0
	vmsr	fpscr, r1
	vldr	d7, [lr]                        @ 8-byte Reload
	vldmia	sp, {d8, d9}                    @ 16-byte Reload
	vldr	d7, [lr, #8]                    @ 8-byte Reload
	vadd.f64	d7, d8, d7
	vstr	d7, [r4]
	vstr	d4, [r4, #8]
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	vmsr	fpscr, r1
	add	sp, sp, #32
	pop	{r4, r5, r6, pc}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One observation that we could make here is that, ideally we should prefer not
to pick these non-consecutive registers. Both the spills and reloads that
involve them are costlier in number of instructions. This is something we could
influence in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMRegisterInfo.td&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Copies&lt;/h2&gt;

&lt;p&gt;We mentioned above the compiler may have to introduce copies when removing SSA.
But the backend does not know how to do that.&lt;/p&gt;

&lt;p&gt;Fortunately the ARM backend is very well implemented so adding this is
relatively easy to do in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMBaseInstrInfo.cpp&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMBaseInstrInfo.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -979,6 +979,16 @@&lt;/span&gt; void ARMBaseInstrInfo::copyPhysReg(MachineBasicBlock &amp;amp;MBB,
     Opc = ARM::VMOVS;
     BeginIdx = ARM::ssub_0;
     SubRegs = 2;
&lt;span class=&quot;gi&quot;&gt;+  } else if (ARM::DPRx2RegClass.contains(DestReg, SrcReg) &amp;amp;&amp;amp;
+             Subtarget.hasVFP2Base()) {
+    Opc = ARM::VMOVD;
+    BeginIdx = ARM::dsub_len2_0;
+    SubRegs = 2;
+  } else if (ARM::SPRx4RegClass.contains(DestReg, SrcReg) &amp;amp;&amp;amp;
+             Subtarget.hasVFP2Base()) {
+    Opc = ARM::VMOVS;
+    BeginIdx = ARM::ssub_len4_0;
+    SubRegs = 4;
&lt;/span&gt;   } else if (SrcReg == ARM::CPSR) {
     copyFromCPSR(MBB, I, DestReg, KillSrc, Subtarget);
     return;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code already knows how to copy subregisters so we specify the instruction
we want to use, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmovd&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmovs&lt;/code&gt;, and how many subregisters are involved
from the first subregister.&lt;/p&gt;

&lt;h3&gt;Results&lt;/h3&gt;

&lt;p&gt;In order to force copies be emitted, we need to make sure our LLVM IR code
has control flow that mandates this.&lt;/p&gt;

&lt;p&gt;The following LLVM IR causes this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;t_doubles_phi.ll&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%dis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;icmp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;slt&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%dis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block2&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;block1:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block3&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;block2:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fmul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block3&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;block3:&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;phi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%block2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basically we check if the first parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%dis&lt;/code&gt; is larger that 4. If it is we
add vectors &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%b&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block1&lt;/code&gt;). Otherwise we multiply them (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block2&lt;/code&gt;).
This is the value we store in the pointer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*%pc&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block3&lt;/code&gt;). The value, however
flows in from the two blocks, hence a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phi&lt;/code&gt; instruction appears to merge the two
incoming values. The merged value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%p&lt;/code&gt; is the one stored.&lt;/p&gt;

&lt;p&gt;We can look at the Machine IR right before the pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postrapseudos&lt;/code&gt;, which is
used to expand the generic pseudo instructions used by the Register Allocator
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ra&lt;/code&gt;).  Those pseudos include a generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt; instruction.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; copy.mir &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      t_doubles_phi.ll  &lt;span class=&quot;nt&quot;&gt;-stop-before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postrapseudos &lt;span class=&quot;nt&quot;&gt;-simplify-mir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;copy.mir&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;body:             |
  bb.0.block3:
    liveins: $r0, $r1, $r2, $r3, $d8, $d9
  
    $sp = frame-setup VSTMDDB_UPD $sp, 14 /* CC::al */, $noreg, killed $d8, killed $d9
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $d9, -8
    frame-setup CFI_INSTRUCTION offset $d8, -16
    renamable $d4 = VLDRD renamable $r2, 0, 14 /* CC::al */, $noreg, implicit-def $d4_d5x2 :: (load 8 from %ir.pb)
    renamable $d5 = VLDRD killed renamable $r2, 2, 14 /* CC::al */, $noreg, implicit killed $d4_d5x2, implicit-def $d4_d5x2 :: (load 8 from %ir.pb + 8)
    renamable $d8 = VLDRD renamable $r1, 0, 14 /* CC::al */, $noreg, implicit-def $d8_d9x2 :: (load 8 from %ir.pa)
    renamable $d9 = VLDRD killed renamable $r1, 2, 14 /* CC::al */, $noreg, implicit killed $d8_d9x2, implicit-def $d8_d9x2 :: (load 8 from %ir.pa + 8)
    dead renamable $r1, dead renamable $r2 = VFPSETLEN 1, implicit-def $fpscr
    renamable $d6_d7x2 = VMULDx2 renamable $d8_d9x2, renamable $d4_d5x2, 14 /* CC::al */, $noreg, implicit $fpscr
    renamable $d4_d5x2 = VADDDx2 killed renamable $d8_d9x2, killed renamable $d4_d5x2, 14 /* CC::al */, $noreg, implicit $fpscr
    CMPri killed renamable $r0, 4, 14 /* CC::al */, $noreg, implicit-def $cpsr
    Bcc %bb.2, 11 /* CC::lt */, killed $cpsr
  
  bb.1.select.false:
    liveins: $r3, $d6_d7x2
  
    renamable $d4_d5x2 = COPY killed renamable $d6_d7x2
  
  bb.2.select.end:
    liveins: $r3, $d4_d5x2
  
    VSTRD renamable $d4, renamable $r3, 0, 14 /* CC::al */, $noreg :: (store 8 into %ir.pc)
    VSTRD renamable $d5, killed renamable $r3, 2, 14 /* CC::al */, $noreg, implicit killed $d4_d5x2 :: (store 8 into %ir.pc + 8)
    dead renamable $r0, dead renamable $r1 = VFPSETLEN 0, implicit-def $fpscr
    $sp = frame-destroy VLDMDIA_UPD $sp, 14 /* CC::al */, $noreg, def $d8, def $d9
    BX_RET 14 /* CC::al */, $noreg
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look closely at the code, you can see the compiler has changed the code
in a way that it especulatively executes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fadd&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmul&lt;/code&gt; (look for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VMULDx2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; instructions in lines 14 and 15) in the entry block
(shown as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bb.0.block3&lt;/code&gt;, but the relevant bit is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bb.0&lt;/code&gt;). Each operation uses a
different register (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d4_d5x2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d6_d7x2&lt;/code&gt;) and one of the registers
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d4_d5x2&lt;/code&gt;) is the one that ends being stored in the final block
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bb.2.select.end&lt;/code&gt;, lines 27 and 28).&lt;/p&gt;

&lt;p&gt;Then the comparison happens and if turns out false (block &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bb.1.select.false&lt;/code&gt;,
lines 19 to 22) we copy the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d6_d7x2&lt;/code&gt; (line 22), which contains
the multiplication result, into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$d4_d5x2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we look at the generated assembly, we see the copies we explicitly introduced.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - t_doubles_phi.ll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_vec:
	.fnstart
@ %bb.0:                                @ %block3
	vpush	{d8, d9}
	vldmia	r1, {d8, d9}
	mov	r1, #65536
	cmp	r0, #4
	vldmia	r2, {d4, d5}
	vmrs	r2, fpscr
	bic	r2, r2, #458752
	orr	r2, r2, r1
	vmsr	fpscr, r2
	vmul.f64	d6, d8, d4
	vadd.f64	d4, d8, d4
	blt	.LBB0_2
@ %bb.1:                                @ %select.false
	vmov.f64	d4, d6
	vmov.f64	d5, d7
.LBB0_2:                                @ %select.end
	vstmia	r3, {d4, d5}
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	vmsr	fpscr, r1
	vpop	{d8, d9}
	bx	lr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this is all for this installment. In the next one we will make enough
changes to the compiler so we can convince the existing loop vectorizer of LLVM
that it can vectorize some simple codes in VFPv2.&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><summary type="html">We finished the last installment of this series mentioning that the compiler cannot copy, load or store a vector. Today we will address this.</summary></entry><entry><title type="html">Fun with vectors in the Raspberry Pi 1 - Part 6</title><link href="https://thinkingeek.com/2021/07/11/raspberry-vectors-part-6/" rel="alternate" type="text/html" title="Fun with vectors in the Raspberry Pi 1 - Part 6" /><published>2021-07-11T20:10:00+00:00</published><updated>2021-07-11T20:10:00+00:00</updated><id>https://thinkingeek.com/2021/07/11/raspberry-vectors-part-6</id><content type="html" xml:base="https://thinkingeek.com/2021/07/11/raspberry-vectors-part-6/">&lt;p&gt;There is an issue we have mentioned several times in earlier installments: the
value of the vector length at function boundaries. This is, when entering or
leaving a function. We will address this question today.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;Calling convention&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.arm.com/documentation/ihi0042/j&quot;&gt;Arm Procedure Call
Standard&lt;/a&gt; specifies how
parameters are passed in function calls. Also the convention specifies
other details, like the state registers upon entering a function. One of the
details it specifies is the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The length bits (16-18) must be 0b100 when using M-profile Vector Extension,
0b000 when using VFP vector mode and otherwise preserved across a public
interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, in order to interface correctly with other functions we need to make sure
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; when calling a function. We will achieve this
using the following approach&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; that sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to 0 will be emitted prior a function call&lt;/li&gt;
  &lt;li&gt;a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; that sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to 0 will be emitted before returning from a function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will do this in SelectionDAG. The optimisation we implemented in the last
chapter should be able to remove all the redundant cases.&lt;/p&gt;

&lt;h1&gt;Changes in SelectionDAG&lt;/h1&gt;

&lt;p&gt;In order to implement this in SelectionDAG, the easiest approach is to create
a new target-specific SelectionDAG node.&lt;/p&gt;

&lt;p&gt;We do that by first declaring a new enumerator of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeType&lt;/code&gt; enum, in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISelLowering.h&lt;/code&gt;. We will call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENZERO&lt;/code&gt; and its purpose
will be exclusively setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to 0.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMISelLowering.h&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -312,6 +312,9 @@&lt;/span&gt;
     CSNEG, // Conditional select negate.
     CSINC, // Conditional select increment.
 
&lt;span class=&quot;gi&quot;&gt;+    // VFP2
+    VFPSETLENZERO,
+
&lt;/span&gt;     // Vector load N-element structure to all lanes:
     VLD1DUP = ISD::FIRST_TARGET_MEMORY_OPCODE,
     VLD2DUP,&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can define the tablegen node itself. This is done in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMInstrVFP.td&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMInstrVFP.td&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -32,6 +32,9 @@&lt;/span&gt;
 def arm_vmovhr : SDNode&amp;lt;&quot;ARMISD::VMOVhr&quot;, SDT_VMOVhr&amp;gt;;
 def arm_vmovrh : SDNode&amp;lt;&quot;ARMISD::VMOVrh&quot;, SDT_VMOVrh&amp;gt;;
 
&lt;span class=&quot;gi&quot;&gt;+def arm_vfpsetlenzero : SDNode&amp;lt;&quot;ARMISD::VFPSETLENZERO&quot;, SDTNone,
+                               [SDNPHasChain]&amp;gt;;
+
&lt;/span&gt; //===----------------------------------------------------------------------===//
 // Pseudos VFP database.
 //&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This definition in tablegen defines a new record named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm_vfpsetlenzero&lt;/code&gt; of
type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDNode&lt;/code&gt;. This class needs a few parameters: the enumerator we declared
above in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISelLowering.h&lt;/code&gt;, a prototype of the node and a list of attributes. The
prototype of the node allows specifying what operands and what values returns a
node. In our case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm_vfpsetlenzero&lt;/code&gt; will not receive any parameter not return
anything so we can use the predefined prototype for this case, called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDTNone&lt;/code&gt;. The only attribute we have is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDNPHasChain&lt;/code&gt; which means the node
has a chain.&lt;/p&gt;

&lt;p&gt;A chain is one of the three dependence kinds that SelectionDAG nodes can
represent: data flow (called &lt;em&gt;normal values&lt;/em&gt;, this is operands and results of a
node modelling some operation), control flow (chain, used for things like
memory accesses or other dependences that are unrelated to data but to
operation ordering), and scheduling-dependences (called &lt;em&gt;glue&lt;/em&gt;, used for things
like CPU flags).  Dependences are important when the output SelectionDAG is
linearised into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MachineInstr&lt;/code&gt;s because they determine a valid order. When a
SelectionDAG node has chain, it has an input and an output chain.&lt;/p&gt;

&lt;p&gt;We still need to make one final change in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISelLowering.cpp&lt;/code&gt; so we can print
the name of the node (used for debugging).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMISelLowering.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -1840,6 +1840,7 @@&lt;/span&gt; const char *ARMTargetLowering::getTargetNodeName(unsigned Opcode) const {
     MAKE_CASE(ARMISD::CSINC)
     MAKE_CASE(ARMISD::MEMCPYLOOP)
     MAKE_CASE(ARMISD::MEMSETLOOP)
&lt;span class=&quot;gi&quot;&gt;+    MAKE_CASE(ARMISD::VFPSETLENZERO)
&lt;/span&gt; #undef MAKE_CASE
   }
   return nullptr;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;Lowering&lt;/h1&gt;

&lt;p&gt;We have to change two locations in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISelLowering.cpp&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMTargetLowering::LowerCall&lt;/code&gt; which deals with calls functions. We will
add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENZERO&lt;/code&gt; right before the lowering of a function call.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMTargetLowering::LowerReturn&lt;/code&gt; which deals with lowering a function. We will
add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLENZERO&lt;/code&gt; very early in the return node.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both places the code is the same.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMISelLowering.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -2386,6 +2387,10 @@&lt;/span&gt; ARMTargetLowering::LowerCall(TargetLowering::CallLoweringInfo &amp;amp;CLI,
       AFI-&amp;gt;setArgRegsSaveSize(-SPDiff);
   }
 
&lt;span class=&quot;gi&quot;&gt;+  if (Subtarget-&amp;gt;hasVFP2Base()) {
+    Chain = DAG.getNode(ARMISD::VFPSETLENZERO, dl, MVT::Other, Chain);
+  }
+
&lt;/span&gt;   if (isSibCall) {
     // For sibling tail calls, memory operands are available in our caller's stack.
     NumBytes = 0;
&lt;span class=&quot;p&quot;&gt;@@ -3116,6 +3121,10 @@&lt;/span&gt; ARMTargetLowering::LowerReturn(SDValue Chain, CallingConv::ID CallConv,
     DAG.getContext()-&amp;gt;diagnose(Diag);
   }
 
&lt;span class=&quot;gi&quot;&gt;+  if (Subtarget-&amp;gt;hasVFP2Base()) {
+    Chain = DAG.getNode(ARMISD::VFPSETLENZERO, dl, MVT::Other, Chain);
+  }
+
&lt;/span&gt;   // Copy the result values into the output registers.
   for (unsigned i = 0, realRVLocIdx = 0;
        i != RVLocs.size();&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm_vfpsetlenzero&lt;/code&gt; in C++ using its enumerator
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISD::VFPSETLENZERO&lt;/code&gt;. It only returns a chain which has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVT::Other&lt;/code&gt;
and receives an input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chain&lt;/code&gt;. The new node is the previous chain that will
be used in later nodes.&lt;/p&gt;

&lt;h2&gt;Initial DAG&lt;/h2&gt;

&lt;p&gt;Now we can do a first experiment and see how the SelectionDAG looks like. Let’s
consider the following LLVM IR.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;test.ll&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - test.ll &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;-debug-only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;isel&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will crash because we are still missing a few bits, but we can look
at the initial SelectionDAG.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Initial selection DAG: %bb.0 'test_vec:'
SelectionDAG has 33 nodes:
  t0: ch = EntryToken
  t7: i32 = GlobalAddress&amp;lt;void (i32, i32)* @foo&amp;gt; 0
    t10: ch = ARMISD::VFPSETLENZERO t0
  t12: ch,glue = callseq_start t10, TargetConstant:i32&amp;lt;0&amp;gt;, TargetConstant:i32&amp;lt;0&amp;gt;
  t14: i32,ch = CopyFromReg t12, Register:i32 $sp
  t16: ch,glue = CopyToReg t12, Register:i32 $r0, Constant:i32&amp;lt;1&amp;gt;
  t18: ch,glue = CopyToReg t16, Register:i32 $r1, Constant:i32&amp;lt;3&amp;gt;, t16:1
  t21: ch,glue = ARMISD::CALL t18, TargetGlobalAddress:i32&amp;lt;void (i32, i32)* @foo&amp;gt; 0, Register:i32 $r0, Register:i32 $r1, RegisterMask:Untyped, t18:1
  t23: ch,glue = callseq_end t21, TargetConstant:i32&amp;lt;0&amp;gt;, TargetConstant:i32&amp;lt;-1&amp;gt;, t21:1
  t24: i32 = Constant&amp;lt;0&amp;gt;
    t2: i32,ch = CopyFromReg t0, Register:i32 %0
  t26: v2f64,ch = load&amp;lt;(load 16 from %ir.pa, align 8)&amp;gt; t23, t2, undef:i32
    t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t27: v2f64,ch = load&amp;lt;(load 16 from %ir.pb, align 8)&amp;gt; t23, t4, undef:i32
        t29: ch = TokenFactor t26:1, t27:1
        t28: v2f64 = fadd t26, t27
        t6: i32,ch = CopyFromReg t0, Register:i32 %2
      t30: ch = store&amp;lt;(store 16 into %ir.pc, align 8)&amp;gt; t29, t28, t6, undef:i32
    t31: ch = ARMISD::VFPSETLENZERO t30
  t32: ch = ARMISD::RET_FLAG t31
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you check lines 5 and 21 you will see the new node. You will see each one
receives a chain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t30&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t0&lt;/code&gt; is the initial chain of the basic block
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISD::VFPSETLENZERO&lt;/code&gt; has an output chain called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t10&lt;/code&gt; which is the inptu
chain of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callseq_start&lt;/code&gt;, a node used to signal the beginning of a function
call. We basically set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to zero right before starting the function call
sequence.&lt;/p&gt;

&lt;p&gt;Similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t30&lt;/code&gt; is the input chain for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISDF::VFPSETLENZERO&lt;/code&gt; that we
emit right before returning. The return in ARM is represented using the node
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISD::RET_FLAG&lt;/code&gt;. The input chain of that node is exactly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t31&lt;/code&gt; which is the
output chain of this second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISD::VFPSETLENZERO&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Selection&lt;/h2&gt;

&lt;p&gt;As I mentioned, the initial test above crashes. At this stage, LLVM does not
know how to select this input SelectionDAG node &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMISD::VFPSETLENZERO&lt;/code&gt; into an
output SelectionDAG node. So we have to tell LLVM how to do that.&lt;/p&gt;

&lt;p&gt;The easiest way is to add a pattern. A suitable place is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMInstrVFP.td&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;def : Pat&amp;lt;(arm_vfpsetlenzero), (VFPSETLEN 0)&amp;gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, there is a minor issue. When the output SelectionDAG has been
scheduled, the creation of machine instructions (done by InstrEmitter) will set
the implicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Defs&lt;/code&gt; to &lt;em&gt;dead&lt;/em&gt; (meaning that nobody uses the value set there).
This means that this pattern will generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MachineInstr&lt;/code&gt; like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;  %20:gpr, %21:gprnopc = VFPSETLEN 0, implicit-def dead $fpscr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This confuses later passes in the LLVM pipeline and causes wrong code
generation. There are reasons why SelectionDAG does this. In fact, there is a
number of situations in which InstrEmitter will not mark implicit definitions
as dead, but this is not one of them. Luckily we can do a final fixup of an
instruction after it has been emitted.&lt;/p&gt;

&lt;p&gt;To do that we first need to change the definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMInstrVFP.td&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -2928,7 +2927,8 @@&lt;/span&gt; let Defs = [FPSCR],
     hasNoSchedulingInfo = 1,
     mayLoad = 0,
     mayStore = 0,
&lt;span class=&quot;gd&quot;&gt;-    hasSideEffects = 0 in
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    hasSideEffects = 0,
+    hasPostISelHook = 1 in
&lt;/span&gt; def VFPSETLEN : PseudoInst&amp;lt;(outs GPR:$scratch1, GPRnopc:$scratch2),
                            (ins imm0_7:$len),
                            IIC_fpSTAT, []&amp;gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now InstrEmitter will call a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdjustInstrPostInstrSelection&lt;/code&gt;
after it has created the machine instruction. Let’s handle the
instruction there and make sure the implicit operand is never dead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;llvm/lib/Target/ARM/ARMISelLowering.cpp&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;p&quot;&gt;@@ -12030,6 +12029,14 @@&lt;/span&gt; void ARMTargetLowering::AdjustInstrPostInstrSelection(MachineInstr &amp;amp;MI,
     return;
   }
 
&lt;span class=&quot;gi&quot;&gt;+  if (MI.getOpcode() == ARM::VFPSETLEN) {
+      // fpscr is never dead.
+      MachineOperand &amp;amp;MO = MI.getOperand(3);
+      assert(MO.isImplicit() &amp;amp;&amp;amp; &quot;This is not an implicit operand&quot;);
+      MO.setIsDead(false);
+      return;
+  }
+
&lt;/span&gt;   const MCInstrDesc *MCID = &amp;amp;MI.getDesc();
   // Adjust potentially 's' setting instructions after isel, i.e. ADC, SBC, RSB,
   // RSC. Coming out of isel, they have an implicit CPSR def, but the optional&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will make the above machine instruction look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;  %20:gpr, %21:gprnopc = VFPSETLEN 0, implicit-def $fpscr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;Results&lt;/h1&gt;

&lt;p&gt;Now we can see what is the output of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.ll&lt;/code&gt; above with and without
optimisation. The first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; can be removed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;nt&quot;&gt;-U1000&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                       &lt;span class=&quot;nt&quot;&gt;-arm-optimize-vfp2-disable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - test.ll&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                 &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                       &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - test.ll&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt; @ %bb.0:
 	push	{r4, r5, r6, lr}
 	mov	r5, r1
&lt;span class=&quot;gd&quot;&gt;-	vmrs	r1, fpscr
&lt;/span&gt; 	mov	r6, r0
 	mov	r0, #1
&lt;span class=&quot;gd&quot;&gt;-	mov	r4, r2
-	bic	r1, r1, #458752
-	vmsr	fpscr, r1
&lt;/span&gt; 	mov	r1, #3
&lt;span class=&quot;gi&quot;&gt;+	mov	r4, r2
&lt;/span&gt; 	bl	foo
 	vldmia	r5, {d4, d5}
 	mov	r0, #65536
 	vldmia	r6, {d6, d7}
 	vmrs	r1, fpscr
 	bic	r1, r1, #458752
 	orr	r1, r1, r0
 	vmsr	fpscr, r1
 	vadd.f64	d4, d6, d4
 	vstmia	r4, {d4, d5}
 	vmrs	r1, fpscr
 	bic	r1, r1, #458752
 	vmsr	fpscr, r1
 	pop	{r4, r5, r6, pc}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we move the call right before the return, this time the final &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;
can be removed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;test-2.ll&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;nt&quot;&gt;-U1000&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                       &lt;span class=&quot;nt&quot;&gt;-arm-optimize-vfp2-disable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - test-2.ll&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                 &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt; armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                       &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - test-2.ll&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt; test_vec:
 	.fnstart
 @ %bb.0:
 	push	{r11, lr}
 	vldmia	r0, {d6, d7}
 	mov	r0, #65536
 	vldmia	r1, {d4, d5}
 	vmrs	r1, fpscr
 	bic	r1, r1, #458752
 	orr	r1, r1, r0
 	mov	r0, #1
 	vmsr	fpscr, r1
 	vadd.f64	d4, d6, d4
 	vstmia	r2, {d4, d5}
 	vmrs	r1, fpscr
 	bic	r1, r1, #458752
 	vmsr	fpscr, r1
 	mov	r1, #3
 	bl	foo
-	vmrs	r1, fpscr
-	bic	r1, r1, #458752
-	vmsr	fpscr, r1
 	pop	{r11, pc}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if we move the call to some other position the backend crashes. The
reason is that the compiler wants to preserve the value of the vector registers
that are live across the call. To do this it needs to store the vector register
onto the stack, but it does not know how to do that.&lt;/p&gt;

&lt;p&gt;In the next installment we will teach the compiler to &lt;em&gt;spill&lt;/em&gt;, &lt;em&gt;reload&lt;/em&gt; and
&lt;em&gt;copy&lt;/em&gt; vector registers.&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><summary type="html">There is an issue we have mentioned several times in earlier installments: the value of the vector length at function boundaries. This is, when entering or leaving a function. We will address this question today.</summary></entry><entry><title type="html">Fun with vectors in the Raspberry Pi 1 - Part 5</title><link href="https://thinkingeek.com/2021/07/10/raspberry-vectors-part-5/" rel="alternate" type="text/html" title="Fun with vectors in the Raspberry Pi 1 - Part 5" /><published>2021-07-10T10:04:00+00:00</published><updated>2021-07-10T10:04:00+00:00</updated><id>https://thinkingeek.com/2021/07/10/raspberry-vectors-part-5</id><content type="html" xml:base="https://thinkingeek.com/2021/07/10/raspberry-vectors-part-5/">&lt;p&gt;In the last installment we completed all the code generation step. However
the whole process is still a bit suboptimal. Today we are going to see how 
we can improve this.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;Discussion&lt;/h1&gt;

&lt;p&gt;From a modelling point of view, our biggest problem is that now all the vector
floating point operations use an extra operand: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;. So
we need to make sure the right value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is set. Perhaps the most annoying
fact here is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is in practice like a global variable.&lt;/p&gt;

&lt;p&gt;Our approach is a very simple one: every instruction will ensure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is
correctly set before executing. There is an important upside to this approach:
it is simple and it provides code that is trivially correct very early in the
pipeline. This last property is important because it sets what we could call a
&lt;em&gt;correctness baseline&lt;/em&gt; within the code generation process. The downside is that
we need to remove many redundant cases, so the quality of the code will
directly depend on how good we are at removing them. Having a baseline is
actually beneficial because it allows us to tell if there are functional
differences once we have removed the redundant assignments to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However this is not the only approach possible. Another option is to delay as
much as possible the updates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; and insert them when needed based on some
analysis. This approach potentially can be faster, because we do not add
instructions just to later remove them. The downside is that we will not enjoy
a reference baseline that we can use. This means this is not an optimisation
anymore, instead this is a non-optional step. The amount of analysis required
for both approaches is similar. So, if we do not care about the correctness
baseline, then this approach would be a better choice.&lt;/p&gt;

&lt;h1&gt;Strategy to remove redundant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;We are going to use a relatively simple data flow algorithm to approximate the
value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; through the program, very similar to a simple constant
propagation. Our goal is to know if at a given point, what is the value of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;. For the purpose of the analysis, only the value at the entry and the value
at the exit of a basic block are the ones we care about.&lt;/p&gt;

&lt;p&gt;The value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; can be modelled under three different circumstances:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we do not know anything, yet, about the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;we do know its exact value&lt;/li&gt;
  &lt;li&gt;we do not know the value because at this point of the program &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; could have two or more different values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first case happens at the beginning of the algorithm. For each basic block,
its incoming &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; value is unknown. The only exception is the entry
block of the function where the AAPCS (the Arm calling convention) guarantees
that the vector length is 1 (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is 0).&lt;/p&gt;

&lt;p style=&quot;padding: 0.7em; background-color: bisque;&quot;&gt;
So far we have not addressed the case where we do function calls, so our
compiler is generating code that does not ensure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is 1 at the beginning or
exit of a function. We will address this in a later chapter.
&lt;/p&gt;

&lt;p&gt;The second case happens, for instance, right after a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; instruction.
After that instruction we know exactly the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; (it is represented as
an immediate of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;). So, given a basic block that contains
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;, its last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; determines the outgoing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The third case happens, for instance, in the basic block that follows an if
construct. Suppose the &lt;em&gt;then&lt;/em&gt; block sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to one value and the &lt;em&gt;else&lt;/em&gt; block
sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to another different value. In this case we do not know which branch
will be executed so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is in practice &lt;em&gt;variable&lt;/em&gt; here.&lt;/p&gt;

&lt;p&gt;Now, it should be possible, using an iterative algorithm, to propagate this
information through the basic blocks.&lt;/p&gt;

&lt;h1&gt;Implementation&lt;/h1&gt;

&lt;p&gt;We are going to represent the length with the following convenience class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Value is encoded with offset +1. 0b000 is length 1, 0b111 is length 8.&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uninit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b1111&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uninit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No value held&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mb&quot;&gt;0b000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b111&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUninitialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isUninitialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uninit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;An instance of class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Length&lt;/code&gt; can represent a length (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0b000&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0b111&lt;/code&gt;)
and two extra values: uninitialised (which means unknown but as in &lt;em&gt;no
information is available&lt;/em&gt;, first case above) and variable (which also means
unknown but as in &lt;em&gt;conflicting information is available&lt;/em&gt;, third case above). The
initial value of an object of class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Length&lt;/code&gt; is uninitialised.&lt;/p&gt;

&lt;p&gt;For each basic block we will want to know the length at the beginning of the
basic block and at the end. Because the last instruction that changes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;
is relevant for the outgoing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;, we will have a pointer to that instruction
(if it exists).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlockData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The incoming and outgoing lengths of this block.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineInstr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to link this information to each basic block we will use a vector
that we will index using the basic block number (an identifier that LLVM gives
to each basic block).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlockData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;Initialisation&lt;/h2&gt;

&lt;p&gt;A very basic step will be computing the initial information for each basic
block.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMOptimizeVFP2Len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computeLocalBlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BlockData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEntryBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOpcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPSETLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Handle calls first.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// On exit, functions restore vector length == 1.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If the FPSCR is modified outside of our control, assume&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// that it is variable.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modifiesRegister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FPSCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInlineAsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As mentioned above, we know the entry block will have a vector length of 1. In
absence of any instruction that changes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;, the initial value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;
will be the same as the final value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;, hence &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LI.OutLen = LI.InLen;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, for each instruction of the basic block (in sequence order), we analyze it.
If the instruction is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; it is very easy to extract the value of the
length from its immediate operand.&lt;/p&gt;

&lt;p&gt;Function calls have to preserve the length in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;, so after
a call the length is always 1.&lt;/p&gt;

&lt;p&gt;We need to deal with instructions that might modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; or inline
assembly. We conservatively assume they could set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to any value. One
detail here, function calls might modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; but not the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field we
care, so we check them first.&lt;/p&gt;

&lt;p&gt;In all those cases we update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LastChange&lt;/code&gt; to the instruction that made the
change. If no instruction in a basic block may change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LastChange&lt;/code&gt;
will remain as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Propagation&lt;/h2&gt;

&lt;p&gt;Now we can propagate this information through all the basic blocks. The
algoritm will iterate until no more lengths need to be propagated. This is out
of scope of this post but the theoretical underpinnings (semilattice and join
operation) guarantee that this should happen.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMOptimizeVFP2Len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computeBlocksInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Compute the initial information for the entry block.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;computeLocalBlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WorkList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WorkList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BlockData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;computeIncomingLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WorkList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To implement this we will use a &lt;em&gt;worklist&lt;/em&gt;. The worklist is a queue that will
contain the basic blocks pending to propagate. Initially all the basic blocks
should be propagated their predecessors so all of them should be in the queue.
Given that we need to initialise all the basic blocks, we can initialise them
and add them to the worklist queue at the same time (lines 4 to 9).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InQueue&lt;/code&gt; attribute will be used to know if a basic block is in the queue
or not. It will avoid infinite recursion in case of loops but may also avoid
propagating too many times the same basic blocks. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InQueue&lt;/code&gt; field is in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BlockData&lt;/code&gt;, which now looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlockData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The incoming and outgoing lengths of this block.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineInstr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can proceed with propagating the values of the length through
the different basic blocks (lines 11 to 17).&lt;/p&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;computeIncomingLen&lt;/code&gt; is responsible to merge all the incoming
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; values from predecessors of a given block. If the merge results in a
change of the output of the basic block, all the successors need to be updated
as well.&lt;/p&gt;

&lt;p&gt;But first let’s see how we merge two lengths.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeLengths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUninitialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUninitialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This function must be commutative (due to the underpinning theory of this
operation). If either of the merged lengths is variable, the result will be
variable. This is because, once the length is variable, no other length can
change that fact when merging them.&lt;/p&gt;

&lt;p&gt;The opposite case with uninitialised. If either is uninitialised it means
it has no information. So we just return the other length which, if not 
uninitialised, will always provide more information.&lt;/p&gt;

&lt;p&gt;Finally if both have a known length, we check if it is the same. If they are
the same just return that known length. If they are not of the same length,
then we have a variable case.&lt;/p&gt;

&lt;p&gt;Now we are ready to propagate the length through basic blocks.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMOptimizeVFP2Len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computeIncomingLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BlockData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predecessors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PredOutLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeLengths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PredOutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// If nothing changes the length in this basic block, propagate, the incoming&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// length is also the outgoing length.&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrevOutLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrevOutLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If the output has changed, propagate the changes to the successors.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;successors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Don't add again those that are in the queue already.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WorkList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the input length of a basic block is not variable (line 6, this is an
optimisation to avoid unnecessary work because the algorithm would be correct
anyway) then we merge the current incoming length with the outgoing length of
all the predecessor basic blocks (lines 7 to 10).  Note that initially, the
incoming length of a block will be uninitialised (except for the entry block
but the entry block has no predecessors!).&lt;/p&gt;

&lt;p&gt;Once we have updated the value of the incoming length we may have to update the
value of the outgoing length. This is only relevant if there is no instruction
that changes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is propagated unmodified through the block). If
this is the case, we update the outgoing length. If the propagation resulted in
a new value (lines 16 to 20) for the outgoing length then we need to update the
successors of this basic block (lines 22 to 31). To do that we queue the
successors in the worklist. Note that successors already in the worklist are
not considered.&lt;/p&gt;

&lt;h2&gt;Removal of redundant instructions&lt;/h2&gt;

&lt;p&gt;With all this information now we can proceed to remove the redundant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;
instructions.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMOptimizeVFP2Len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeRedundantVPFSETLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NMBBI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MachineInstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOpcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPSETLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LLVM_DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dbgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Removing redundant: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We can remove this one.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeFromParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CurrentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CurrentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modifiesRegister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FPSCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInlineAsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CurrentLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NMBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For each basic block we get its initial length, which we computed above, and
keep it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CurrentLength&lt;/code&gt; (line 2). Now we go through each instruction that changes
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; and we update again &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CurrentLength&lt;/code&gt; (lines 6 to 26). If we find that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;
would set the same length as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CurrentLength&lt;/code&gt; we can just remove it (lines 12 to 17).&lt;/p&gt;

&lt;p&gt;Note that the iteration through the instructions using iterators is a bit
unusual. The reason is that we may remove an element while iterating, and when
this happens its iterator becomes invalid, so it would not be possible to get
to advance the iterator. To avoid this why we first compute the iterator to the
next instruction (line 7) and we use it to advance the loop (line 25).&lt;/p&gt;

&lt;p style=&quot;padding: 0.7em; background-color: bisque;&quot;&gt;
Note that there is some amount of replication: the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeRedundantVPFSETLEN&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;computeLocalBlockInfo&lt;/code&gt; must track the changes
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; in the same way. Failing to do so will lead to errors. It should be
possible to keep them aligned using a visitor-like pattern.
&lt;/p&gt;

&lt;h2&gt;Entry point&lt;/h2&gt;

&lt;p&gt;This optimisation is run as a compiler pass of the ARM backend. There is some
amount of boilerplate required to do that. This pass is a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MachineFunctionPass&lt;/code&gt;, so it is run once per function in the program. I will
skip most of the details (you can find them in the &lt;a href=&quot;https://llvm.org/docs/WritingAnLLVMPass.html#the-machinefunctionpass-class&quot;&gt;LLVM
documentation&lt;/a&gt;)
of the boilerplate required except for the entry point of the pass itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMOptimizeVFP2Len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runOnMachineFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MachineFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMSubtarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMSubtarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSubtarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasVFP2Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoNotOptimizeVFP2Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skipFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;MF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;BlockInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumBlockIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;computeBlocksInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeRedundantVPFSETLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This function is invoked once per function. There is a number of cases where
this function returns a false value meaning nothing was changed: if we do not
have VFPv2 available, if we have explicitly requested not to optimise it or if
the function explicitly requests no optimisations (via the LLVM function
attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optnone&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We can explicitly disable this optimisation pass using a command line flag. Those
are declared like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DoNotOptimizeVFP2Len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arm-optimize-vfp2-disable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Do not optimize vfp2 length changes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can find details on how these flags work in the &lt;a href=&quot;https://llvm.org/docs/CommandLine.html&quot;&gt;LLVM documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The rest of the function is pretty straightforward. We cache the current
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MachineFunction&lt;/code&gt; in the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MF&lt;/code&gt; of the class. Then we initialize the array
of the information of the basic blocks. We now invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;computeBlocksInfo&lt;/code&gt; and
then we remove the redundant instructions.&lt;/p&gt;

&lt;h1&gt;Result&lt;/h1&gt;

&lt;p&gt;Now we can apply to the final LLVM IR example of last week.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%t1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%t2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pd&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_vector2:
	.fnstart
@ %bb.0:
	vldmia	r0, {d6, d7}
	vldmia	r1, {d4, d5}
	vmrs	r1, fpscr
	mov	r0, #65536
	bic	r1, r1, #458752
	orr	r1, r1, r0
	vmsr	fpscr, r1
	vadd.f64	d4, d6, d4
	vldmia	r2, {d6, d7}
	vadd.f64	d4, d4, d6
	vstmia	r3, {d4, d5}
	bx	lr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yay, we set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; just once.&lt;/p&gt;

&lt;p&gt;Let’s try a more complex example that shows that the propagation works as expected.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;test.c&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;da&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;da&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using the flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-mllvm -arm-optimize-vfp2-disable&lt;/code&gt; we can disable the
optimisation and observe its effects.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;nt&quot;&gt;-U1000&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;  &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;clang &lt;span class=&quot;nt&quot;&gt;-O2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6kz-unknown-linux-gnu       &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;-mfloat-abi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hard                                     &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;-mllvm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-arm-optimize-vfp2-disable&lt;/span&gt; test.c &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                  &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;clang &lt;span class=&quot;nt&quot;&gt;-O2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6kz-unknown-linux-gnu       &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;-mfloat-abi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hard test.c &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt; test:
 	.fnstart
 @ %bb.0:                                @ %entry
&lt;span class=&quot;gd&quot;&gt;-	push	{r4, r5, r6, lr}
-	ldr	r12, [sp, #28]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+	push	{r4, lr}
+	ldr	r12, [sp, #20]
&lt;/span&gt; 	cmp	r12, #11
 	blt	.LBB0_2
 @ %bb.1:                                @ %if.then
&lt;span class=&quot;gd&quot;&gt;-	ldr	r12, [sp, #24]
-	ldr	lr, [sp, #20]
-	ldr	r6, [sp, #16]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+	ldr	r12, [sp, #16]
+	ldr	lr, [sp, #12]
+	ldr	r4, [sp, #8]
&lt;/span&gt; 	vldr	d0, [r12]
 	vldr	d1, [lr]
&lt;span class=&quot;gd&quot;&gt;-	vmrs	r5, fpscr
-	bic	r5, r5, #458752
-	vmsr	fpscr, r5
&lt;/span&gt; 	vadd.f64	d0, d1, d0
&lt;span class=&quot;gd&quot;&gt;-	vstr	d0, [r6]
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+	vstr	d0, [r4]
&lt;/span&gt; 	vldmia	r1, {d6, d7}
 	vldmia	r2, {d4, d5}
 	vmrs	r2, fpscr
 	mov	r1, #65536
 	bic	r2, r2, #458752
 	orr	r2, r2, r1
 	vmsr	fpscr, r2
 	vadd.f64	d4, d6, d4
 	b	.LBB0_3
 .LBB0_2:                                @ %if.else
 	vldmia	r1, {d6, d7}
 	vldmia	r2, {d4, d5}
 	vmrs	r2, fpscr
 	mov	r1, #65536
 	bic	r2, r2, #458752
 	orr	r2, r2, r1
 	vmsr	fpscr, r2
 	vmul.f64	d4, d6, d4
 .LBB0_3:                                @ %if.end
 	vstmia	r0, {d4, d5}
 	vldmia	r3, {d6, d7}
&lt;span class=&quot;gd&quot;&gt;-	vmrs	r2, fpscr
-	mov	r1, #65536
-	bic	r2, r2, #458752
-	orr	r2, r2, r1
-	vmsr	fpscr, r2
&lt;/span&gt; 	vdiv.f64	d4, d4, d6
 	vstmia	r0, {d4, d5}
&lt;span class=&quot;gd&quot;&gt;-	pop	{r4, r5, r6, pc}
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+	pop	{r4, pc}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this test we can remove 2 of the three changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;. A first one sets
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to 0 (i.e. vector length equals to 1) to execute the scalar operation
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*dc = *da + *db;&lt;/code&gt;. But we know that upon entry &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; will be 0, so no need
to change that. After the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement, we set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to 1 (i.e. vector length
equals to two) to execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*vdc = *vdc / *vdd;&lt;/code&gt;, but both branches of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; will have already set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to 1, so no need to do that again.&lt;/p&gt;

&lt;h2&gt;Current limitation&lt;/h2&gt;

&lt;p&gt;There is still a suboptimal case left: if we use vector operations inside a loop
they will set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; at every iteration. This is redundant if all the vector operations
inside the loop use the same length. We could set the length before the loop, just
once. We will address this issue in a later installment.&lt;/p&gt;

&lt;p&gt;In the next episode we will fix the issue related to the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; when
entering and returning from a function.&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><summary type="html">In the last installment we completed all the code generation step. However the whole process is still a bit suboptimal. Today we are going to see how we can improve this.</summary></entry><entry><title type="html">Fun with vectors in the Raspberry Pi 1 - Part 4</title><link href="https://thinkingeek.com/2021/06/27/raspberry-vectors-part-4/" rel="alternate" type="text/html" title="Fun with vectors in the Raspberry Pi 1 - Part 4" /><published>2021-06-27T17:09:00+00:00</published><updated>2021-06-27T17:09:00+00:00</updated><id>https://thinkingeek.com/2021/06/27/raspberry-vectors-part-4</id><content type="html" xml:base="https://thinkingeek.com/2021/06/27/raspberry-vectors-part-4/">&lt;p&gt;In the last chapter we devised a way to tame the issue with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;. Today
we are going to complete the code generation bits that we are still missing
so we can start emitting code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;Expand VFPSETLEN&lt;/h1&gt;

&lt;p&gt;Given that last week we finished with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; instruction being emitted
I guess it makes sense we expand this first.&lt;/p&gt;

&lt;p&gt;The easiest way to achieve this is extending the file
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp&lt;/code&gt; which contains the
implementation of a pass, running after register allocation, intended to expand
pseudo instructions.&lt;/p&gt;

&lt;p&gt;If you check the first installment of this series, you will see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;
field of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; is a field of 3 bits located in bits 18, 17 and 16. Setting
the length mostly means reading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;, which we can do using the
instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmrs&lt;/code&gt;, change the bits and write them back into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; using the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmsr&lt;/code&gt; instruction.&lt;/p&gt;

&lt;p&gt;The complex part of this process is changing the bits. We need to ensure the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field has the bits we want. We can do this in general masking what we
obtained from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmrs&lt;/code&gt; instruction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~(0x7 &amp;lt;&amp;lt; 16)&lt;/code&gt;. This will clear the
three bits of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field and then we can do a bitwise or to set
the precise operation we want. All this is what explained why we needed
two scratch output registers as outputs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMExpandPseudo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpandMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NextMBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPSETLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DebugLoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDebugLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Scratch2 ← FPSCR&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VMRS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Scratch1 ← ~(0x7 &amp;lt;&amp;lt; 16)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MVNi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condCodeOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Scratch2 ← and Scratch2, Scratch1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ANDrr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condCodeOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Scratch1 ← (Length &amp;lt;&amp;lt; 16)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MOVi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condCodeOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Scratch2 ← or Scratch2, Scratch1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORRrr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condCodeOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// FPSCR ← Scratch2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VMSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eraseFromParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code may look long but it should be relatively straightforward to follow.
There are two unobvious elements due to the AArch32 Arm ISA itself. Most
instructions can be predicated, but we want them to be always executed so we
set it to &lt;em&gt;always&lt;/em&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.add(predOps(ARMCC::AL))&lt;/code&gt;. Many Arm instructions may
optionally update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpsr&lt;/code&gt;, because we do not want to do this we state
that using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.add(consCodeOps())&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Other than that, the code above is basically constructing the instruction and
finally removing the pseudo instruction.  Opcode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARM::MVNi&lt;/code&gt; represents a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mvn&lt;/code&gt;
instruction that uses an immediate as an input, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARM::ADDrr&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt;
instruction with two registers as inputs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARM::ORRrr&lt;/code&gt; is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orr&lt;/code&gt; (a bitwise
or) with two registers as inputs.&lt;/p&gt;

&lt;p&gt;One very simple optimization we can do happens when the vector length is 1
(encoded as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;).  In that case we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bic&lt;/code&gt; instruction whose task
is precisely clearing consecutive bits in a register. So we can improve the
emitted instructions like below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMExpandPseudo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpandMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NextMBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPSETLEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DebugLoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDebugLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Scratch2 ← FPSCR&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VMRS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Scratch2 ← clear bits 16, 17, 18&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BICri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condCodeOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Scratch1 ← (Length &amp;lt;&amp;lt; 16)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MOVi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condCodeOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Scratch2 ← or Scratch2, Scratch1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ORRrr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condCodeOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// FPSCR ← Scratch2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MBB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBBI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VMSR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARMCC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eraseFromParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p style=&quot;padding: 0.7em; background-color: honeydew;&quot;&gt;
There is an instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bfi&lt;/code&gt; in a special variant of Armv6, called Armv6T2,
and as of Armv7-A similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bic&lt;/code&gt; to insert arbitrary values into bitfields.
Unfortunately the core of the Raspberry Pi 1 does not implement such
instruction, hence the dance with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orr&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;Now we can see what happens with our last example of a scalar addition.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;scalar.ll&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;clang &lt;span class=&quot;nt&quot;&gt;-O2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mfloat-abi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hard scalar.ll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_scalar:
	vldr	d0, [r1]
	vldr	d1, [r0]
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	vmsr	fpscr, r1
	vadd.f64	d0, d1, d0
	vstr	d0, [r2]
	bx	lr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above we can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bic&lt;/code&gt; instruction in action because here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is set
to zero.&lt;/p&gt;

&lt;p&gt;We can manually modify the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scalar.mir&lt;/code&gt; we generated at the end of the
previous installment so it does &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN 1&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN 0&lt;/code&gt;. We
get this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;-start-after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;finalize-isel scalar.mir &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; -&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_scalar:
	.fnstart
@ %bb.0:
	vldr	d1, [r0]
	mov	r0, #65536
	vldr	d0, [r1]
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	orr	r1, r1, r0
	vmsr	fpscr, r1
	vadd.f64	d0, d1, d0
	vstr	d0, [r2]
	bx	lr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So the lowering of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; is done.&lt;/p&gt;

&lt;p&gt;Next is teaching SelectionDAG to actually try to select operations
involving &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4f32&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Instruction selection&lt;/h1&gt;

&lt;p&gt;Even if in the previous installment we added patterns that instruction
selection can use to select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDSx4&lt;/code&gt;, those will not be
selected. The reason is that instruction selection believes that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4f32&lt;/code&gt; are &lt;em&gt;illegal&lt;/em&gt; types. In LLVM parlance, this means that operations
with these types need to be softened so they only use &lt;em&gt;legal&lt;/em&gt; types. Legal
types and operations are, intuitively, those that are supported more
or less straightforwardly by the target.&lt;/p&gt;

&lt;p&gt;We can specify this in file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/lib/Target/ARM/ARMISelLowering.cpp&lt;/code&gt;. For now
we will focus only on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f32&lt;/code&gt; is the same. We are only going to
make float addition legal (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fadd&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISD::FADD&lt;/code&gt;), but the same applies to all
other operations appearing in the patterns we addded.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/llvm/lib/Target/ARM/ARMISelLowering.cpp b/llvm/lib/Target/ARM/ARMISelLowering.cpp
index 4b63f3f8b3b6..f70e0435241d 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/llvm/lib/Target/ARM/ARMISelLowering.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/llvm/lib/Target/ARM/ARMISelLowering.cpp
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -746,6 +746,31 @@&lt;/span&gt; ARMTargetLowering::ARMTargetLowering(const TargetMachine &amp;amp;TM,
       setAllExpand(MVT::f32);
     if (!Subtarget-&amp;gt;hasFP64())
       setAllExpand(MVT::f64);
&lt;span class=&quot;gi&quot;&gt;+    if (Subtarget-&amp;gt;hasVFP2Base()) {
+      addRegisterClass(MVT::v2f64, &amp;amp;ARM::DPRx2RegClass);
+      setOperationAction(ISD::LOAD, MVT::v2f64, Custom);
+      setOperationAction(ISD::STORE, MVT::v2f64, Custom);
+
+      setOperationAction(ISD::FADD, MVT::v2f64, Legal);
+    }
&lt;/span&gt;   }
 
   if (Subtarget-&amp;gt;hasFullFP16()) {&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First we associate the machine type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; with the register class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2RegClass&lt;/code&gt;. This is a class generated by one of the tablegen backends
based on the register classes we defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMRegisterInfo.td&lt;/code&gt;. We do this
with a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addRegisterClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we say that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISD::FADD&lt;/code&gt; is a legal operation for this target. This means
this operation can be directly selected. Because we have a pattern for it,
we know it will select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx4&lt;/code&gt; instruction.&lt;/p&gt;

&lt;p&gt;One side-effect of linking the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DRPx2&lt;/code&gt; register class is that
now SelectionDAG expects us to be able to lower loads and stores of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt;.
Unfortunately the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; is not used by the load and store instructions of
VFPv2. Because of this we need a way to express a load of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; in a set of
instructions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f64&lt;/code&gt;. Before we can do that we need to let SelectionDAG know
that we will manually handle the lowering of a load and a store of type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Lowering load/store&lt;/h2&gt;

&lt;p&gt;Before we can proceed any further we will need to implement the lowering
of loads and stores of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt;. When an operation is marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Custom&lt;/code&gt;,
the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LowerOperation&lt;/code&gt; is invoked for it. We will create two functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LowerShortVectorLoad&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LowerShortVectorStore&lt;/code&gt; that we will use for
those types.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/llvm/lib/Target/ARM/ARMISelLowering.cpp b/llvm/lib/Target/ARM/ARMISelLowering.cpp
index 4b63f3f8b3b6..f70e0435241d 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/llvm/lib/Target/ARM/ARMISelLowering.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/llvm/lib/Target/ARM/ARMISelLowering.cpp
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -10044,8 +10239,16 @@&lt;/span&gt; SDValue ARMTargetLowering::LowerOperation(SDValue Op, SelectionDAG &amp;amp;DAG) const {
   case ISD::SSUBSAT:
     return LowerSADDSUBSAT(Op, DAG, Subtarget);
   case ISD::LOAD:
&lt;span class=&quot;gi&quot;&gt;+    if (Subtarget-&amp;gt;hasVFP2Base() &amp;amp;&amp;amp;
+        (Op.getValueType() == MVT::v2f64 || Op.getValueType() == MVT::v4f32))
+      return LowerShortVectorLoad(Op, DAG);
&lt;/span&gt;     return LowerPredicateLoad(Op, DAG);
   case ISD::STORE:
&lt;span class=&quot;gi&quot;&gt;+    if (Subtarget-&amp;gt;hasVFP2Base()) {
+      EVT VT = Op.getOperand(1).getValueType();
+      if (VT == MVT::v2f64 || VT == MVT::v4f32)
+        return LowerShortVectorStore(Op, DAG);
+    }
&lt;/span&gt;     return LowerSTORE(Op, DAG, Subtarget);
   case ISD::MLOAD:
     return LowerMLOAD(Op, DAG);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am going to show only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4f32&lt;/code&gt; is similar (just a bit
longer to write). First the vector load.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LowerShortVectorLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectionDAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;LoadSDNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadSDNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemVT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMemoryVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MemVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSimpleVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleTy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;llvm_unreachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unexpected type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is fundamentally the same that SplitVecRes_LOAD does but assembling&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a vector at the end.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDLoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ISD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadExtType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getExtensionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExtType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NON_EXTLOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getChain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBasePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValueType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MachineMemOperand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MMOFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMemOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AAMDNodes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAAInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNINDEXED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;Offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPointerInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOriginalAlign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MMOFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;MachinePointerInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPointerInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getWithOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getObjectPtrOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNINDEXED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOriginalAlign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MMOFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Remember that the loads are parallel.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewCh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TokenFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getUNDEF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTargetInsertSubreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsub_len2_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTargetInsertSubreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsub_len2_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMergeValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewCh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4f32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a bit of code to explain but basically we obtain the specific information
of a load node and we keep it in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LD&lt;/code&gt; variable. We use this to discriminate
the machine type we are handling.&lt;/p&gt;

&lt;p&gt;To create a load we need a bunch of information, but basically we will assume
this is an unindexed load (this means there is no pre/postincrement or
pre/postdecrement involved). The kind of extension load, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExtType, is for
non-extending/zero-extending/sign-extending loads. We do not support it for now
(hence the &lt;/code&gt;assert`).&lt;/p&gt;

&lt;p&gt;The chain, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ch&lt;/code&gt;, is a special operand that can be consumed as input or be
generated as part of the results of a SelectionDAG node and it is used for
control dependencies that cannot be represented via conventional data-flow
dependences (e.g.  a load that follows a store will usually be linked to the
store via a chain).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr&lt;/code&gt; is the value that contains the address. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Offset&lt;/code&gt; will be left to
undefined. There is a bunch of flags we want to propagate from the memory
operands of this SelectionDAG node so (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MMOFlags&lt;/code&gt;) alongwith alias analysis
information (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AAInfo&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;With all this information we can build a first load, that loads the first
element of the vector. Note the machine type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f64&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;The second part of the vector is found at an offsets of 8 bytes of the original
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr&lt;/code&gt; address. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MPI&lt;/code&gt; contains the abstract pointer information and we will state
that it is the same as the original pointer information plus 8 bytes. Similarly
we overwrite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr&lt;/code&gt; with computing an offset of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt; bytes after it. Now we
can build a load for the second element of the vector. Again the type loaded
is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have to build a vector value in the input SelectionDAG. We will take
the two values we just loaded and insert them to the proper subregisters
that we defined in the second installment in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMRegisterInfo.td&lt;/code&gt;. Our
vector value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally because this is a load, we need to return the vector value we just
loaded (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec&lt;/code&gt;) and a chain (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewCh&lt;/code&gt;). The chain is such that represents the two
loads in parallel (i.e.  any operation chained to this value will happen after
both loads but either load can be scheduled at any order). The node that
represents this &lt;em&gt;parallel join&lt;/em&gt; of other chains is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISD::TokenFactor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A similar process happens with stores.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LowerShortVectorStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectionDAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;StoreSDNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoreSDNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SDLoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUnindexed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Stores should be unindexed at this point.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;EVT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemoryVT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMemoryVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MemoryVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSimpleVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleTy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;llvm_unreachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unexpected type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is basically SplitVecOp_STORE but sourcing it from&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a vector.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isTruncatingStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Truncating stores not supported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getChain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBasePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Align&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alignment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOriginalAlign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MachineMemOperand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MMOFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMemOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AAMDNodes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAAInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTargetExtractSubreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsub_len2_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                               &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTargetExtractSubreg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsub_len2_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPointerInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;MMOFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;MachinePointerInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPointerInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getWithOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getObjectPtrOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MMOFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AAInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TokenFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MVT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v4f32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In contrast to the load, we need to extract the different subregisters from
the vector value and then we can store them using regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f64&lt;/code&gt; stores. Also note
that stores do not return any value but a chain. So our lowered store must
return a chain as well. Like we did with loads, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISD::TokenFactor&lt;/code&gt; is used
to state that the two chained operations can happen in parallel.&lt;/p&gt;

&lt;h1&gt;MC layer&lt;/h1&gt;

&lt;p&gt;We are missing a final change so we can emit our instructions: we still have
to replace the pseudo instructions into actual instructions.
From a code generation point of view our vector pseudo instructions are fine.
What it is not fine is that we do not know how to encode them as instructions.&lt;/p&gt;

&lt;p&gt;The MC layer is the part of LLVM devoted to assembly and disassembly of
instructions.  All the instructions defined by tablegen have conceptual mirrors
called MC Instructions and they are used when encoding (assembling) and
decoding (disassembling) instructions.&lt;/p&gt;

&lt;p&gt;If you remember from the last installment, we linked the pseudo instructions
to the real instruction. Now it is the moment to use this.&lt;/p&gt;

&lt;p&gt;Once machine instructions have reached their final stage, they are handed to 
a process that creates MC instructions for each one. These MC instructions
can then be streamed as assembly output (like what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llc&lt;/code&gt; prints as an output)
or to generate an object file (such an ELF file).&lt;/p&gt;

&lt;p&gt;So what we will do is change this lowering from machine instructions to
MC instructions, so our pseudo instructions get encoded like normal
VFPv2 instructions.&lt;/p&gt;

&lt;p&gt;This goes in two steps: first we need to use the real opcode of each
pseudo instruction. Second we need to make sure we use the regular register
that would be encoded. All the changes are in file
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/lib/Target/ARM/ARMMCInstLower.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First let’s add a small diversion in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm::LowerARMMachineInstrToMCInst&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt; void llvm::LowerARMMachineInstrToMCInst(const MachineInstr *MI, MCInst &amp;amp;OutMI,
                                         ARMAsmPrinter &amp;amp;AP) {
&lt;span class=&quot;gi&quot;&gt;+  if (lowerVFPMachineInstrToMCInst(MI, OutMI, AP))
+    return;
+
&lt;/span&gt;   OutMI.setOpcode(MI-&amp;gt;getOpcode());
 
   // In the MC layer, we keep modified immediates in their encoded form&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lowerVFPMachineInstrToMCInst&lt;/code&gt; returns true we do not have
to do anything else here. That function looks like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lowerVFPMachineInstrToMCInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineInstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MCInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                         &lt;span class=&quot;n&quot;&gt;ARMAsmPrinter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VFPPseudos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PseudoInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;VFPPseudos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPseudoInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOpcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VectorLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOpcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&quot;Opcodes should be different at this point&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OutMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOpcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineOperand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MCOperand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MCOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowerOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MCOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;OutMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MCOp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We query in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPPseudos&lt;/code&gt; table if this is a VFP instruction that demands a
length larger than 1.&lt;/p&gt;

&lt;p&gt;If this is the case, we set the opcode of the MC instruction being created
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutMI&lt;/code&gt;) to the opcode of the base instruction. E.g. in this step we go from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt;. Now we proceed as usual lowering the operands.&lt;/p&gt;

&lt;p&gt;When lowering the operands we need to be careful not to emit operands of
the register classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPRx4&lt;/code&gt;. If this is the case, we use the first
subregister instead. To do that we change lowerOperand.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt; bool ARMAsmPrinter::lowerOperand(const MachineOperand &amp;amp;MO,
                                  MCOperand &amp;amp;MCOp) {
&lt;span class=&quot;gi&quot;&gt;+  const MachineInstr *MI = MO.getParent();
+  assert(MI &amp;amp;&amp;amp; &quot;Operand expected to belong to a machine instruction&quot;);
+  const MachineBasicBlock *MBB = MI-&amp;gt;getParent();
+  assert(MBB &amp;amp;&amp;amp; &quot;MI expected to be in a basic block&quot;);
+  const MachineFunction *MF = MBB-&amp;gt;getParent();
+  assert(MF &amp;amp;&amp;amp; &quot;MBB expected to be in a machine function&quot;);
+  const TargetRegisterInfo *TRI =
+      MF-&amp;gt;getSubtarget&amp;lt;ARMSubtarget&amp;gt;().getRegisterInfo();
+
&lt;/span&gt;   switch (MO.getType()) {
   default: llvm_unreachable(&quot;unknown operand type&quot;);
&lt;span class=&quot;gd&quot;&gt;-  case MachineOperand::MO_Register:
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+  case MachineOperand::MO_Register: {
&lt;/span&gt;     // Ignore all implicit register operands.
     if (MO.isImplicit())
       return false;
     assert(!MO.getSubReg() &amp;amp;&amp;amp; &quot;Subregs should be eliminated!&quot;);
&lt;span class=&quot;gd&quot;&gt;-    MCOp = MCOperand::createReg(MO.getReg());
-    break;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+    unsigned Reg = MO.getReg();
+    // Replace the tuple register with the one used in the encoding.
+    if (ARM::DPRx2RegClass.contains(Reg)) {
+      Reg = TRI-&amp;gt;getSubReg(Reg, ARM::dsub_len2_0);
+      assert(Reg &amp;amp;&amp;amp; &quot;Subregister does not exist&quot;);
+    } else if (ARM::SPRx4RegClass.contains(Reg)) {
+      Reg = TRI-&amp;gt;getSubReg(Reg, ARM::ssub_len4_0);
+      assert(Reg &amp;amp;&amp;amp; &quot;Subregister does not exist&quot;);
+    }
+    MCOp = MCOperand::createReg(Reg);
+  } break;
&lt;/span&gt;   case MachineOperand::MO_Immediate:
     MCOp = MCOperand::createImm(MO.getImm());
     break;
&lt;span class=&quot;p&quot;&gt;@@ -120,8 +139,32 @@&lt;/span&gt; bool ARMAsmPrinter::lowerOperand(const MachineOperand &amp;amp;MO,
   return true;
 }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1&gt;First test&lt;/h1&gt;

&lt;p&gt;With all this we can do a first experiment with the following LLVM IR.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;vector.ll&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; - vector.ll&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_vector:
	.fnstart
@ %bb.0:
	vldmia	r0, {d6, d7}
	mov	r0, #65536
	vldmia	r1, {d4, d5}
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	orr	r1, r1, r0
	vmsr	fpscr, r1
	vadd.f64	d4, d6, d4
	vstmia	r2, {d4, d5}
	bx	lr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hey, not bad.&lt;/p&gt;

&lt;p&gt;OK. We still need to think about preserving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field upon returning
the function (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; should be 0b00 again) but this is a start.&lt;/p&gt;

&lt;h2&gt;Under the hood&lt;/h2&gt;

&lt;p&gt;I think this is a good moment to take a look under the hood in the different
steps. Let’s take a look at the whole instruction selection.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null vector.ll &lt;span class=&quot;nt&quot;&gt;-debug-only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;isel &lt;span class=&quot;nt&quot;&gt;-print-before-all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-print-after-all&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This testcase has a single basic block, so only a single SelectionDAG will
be built for it. This is the initial SelectionDAG&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Initial selection DAG: %bb.0 'test_vector:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
  t7: i32 = Constant&amp;lt;0&amp;gt;
    t2: i32,ch = CopyFromReg t0, Register:i32 %0
  t9: v2f64,ch = load&amp;lt;(load 16 from %ir.pa, align 8)&amp;gt; t0, t2, undef:i32
    t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t10: v2f64,ch = load&amp;lt;(load 16 from %ir.pb, align 8)&amp;gt; t0, t4, undef:i32
      t12: ch = TokenFactor t9:1, t10:1
      t11: v2f64 = fadd t9, t10
      t6: i32,ch = CopyFromReg t0, Register:i32 %2
    t13: ch = store&amp;lt;(store 16 into %ir.pc, align 8)&amp;gt; t12, t11, t6, undef:i32
  t14: ch = ARMISD::RET_FLAG t13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note how node &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t11&lt;/code&gt; adds two vectors, loaded in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t9&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t10&lt;/code&gt; respectively.
The SelectionDAG now undergoes a first optimisation step, which makes nothing
because it is so simple. Next a type legalisation step happens but all the types
mentioned are legal (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i32&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Next is legalisation of operations. Now the loads and the stores get custom
lowered as we wanted.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Legalized selection DAG: %bb.0 'test_vector:'
SelectionDAG has 33 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %0
  t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t6: i32,ch = CopyFromReg t0, Register:i32 %2
    t35: ch = TokenFactor t32:1, t34:1
    t27: ch = TokenFactor t24:1, t26:1
  t12: ch = TokenFactor t35, t27
      t36: v2f64 = INSERT_SUBREG undef:v2f64, t32, TargetConstant:i32&amp;lt;9&amp;gt;
    t37: v2f64 = INSERT_SUBREG t36, t34, TargetConstant:i32&amp;lt;10&amp;gt;
      t29: v2f64 = INSERT_SUBREG undef:v2f64, t24, TargetConstant:i32&amp;lt;9&amp;gt;
    t30: v2f64 = INSERT_SUBREG t29, t26, TargetConstant:i32&amp;lt;10&amp;gt;
  t11: v2f64 = fadd t37, t30
  t24: f64,ch = load&amp;lt;(load 8 from %ir.pb)&amp;gt; t0, t4, undef:i32
    t25: i32 = add nuw t4, Constant:i32&amp;lt;8&amp;gt;
  t26: f64,ch = load&amp;lt;(load 8 from %ir.pb + 8)&amp;gt; t0, t25, undef:i32
  t32: f64,ch = load&amp;lt;(load 8 from %ir.pa)&amp;gt; t0, t2, undef:i32
    t33: i32 = add nuw t2, Constant:i32&amp;lt;8&amp;gt;
  t34: f64,ch = load&amp;lt;(load 8 from %ir.pa + 8)&amp;gt; t0, t33, undef:i32
        t16: f64 = EXTRACT_SUBREG t11, TargetConstant:i32&amp;lt;9&amp;gt;
      t19: ch = store&amp;lt;(store 8 into %ir.pc)&amp;gt; t12, t16, t6, undef:i32
        t18: f64 = EXTRACT_SUBREG t11, TargetConstant:i32&amp;lt;10&amp;gt;
        t21: i32 = add nuw t6, Constant:i32&amp;lt;8&amp;gt;
      t22: ch = store&amp;lt;(store 8 into %ir.pc + 8)&amp;gt; t12, t18, t21, undef:i32
    t23: ch = TokenFactor t19, t22
  t14: ch = ARMISD::RET_FLAG t23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t9&lt;/code&gt; in the initial SelectionDAG. It has been expanded into
two stores &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t32&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t34&lt;/code&gt; (note how we annotate the proper 8 bytes offsets in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t34&lt;/code&gt;).  Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t32&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t34&lt;/code&gt; are inserted as subregisters in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t36&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t37&lt;/code&gt;.
The last one will make up the value of the original type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; we had in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t9&lt;/code&gt;. The original chain of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t9&lt;/code&gt; (denoted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t9:1&lt;/code&gt; because it is the second
result of the operation) is now represented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t35&lt;/code&gt; which is the parallel join
of the chains of the already mentioned loads &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t32&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t34&lt;/code&gt; (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t32:1&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t34:1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The SelectionDAG undergoes another optimisation pass which only simplifies the
token factors (check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t39&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Optimized legalized selection DAG: %bb.0 'test_vector:'
SelectionDAG has 31 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %0
  t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t6: i32,ch = CopyFromReg t0, Register:i32 %2
      t36: v2f64 = INSERT_SUBREG undef:v2f64, t32, TargetConstant:i32&amp;lt;9&amp;gt;
    t37: v2f64 = INSERT_SUBREG t36, t34, TargetConstant:i32&amp;lt;10&amp;gt;
      t29: v2f64 = INSERT_SUBREG undef:v2f64, t24, TargetConstant:i32&amp;lt;9&amp;gt;
    t30: v2f64 = INSERT_SUBREG t29, t26, TargetConstant:i32&amp;lt;10&amp;gt;
  t11: v2f64 = fadd t37, t30
  t24: f64,ch = load&amp;lt;(load 8 from %ir.pb)&amp;gt; t0, t4, undef:i32
    t25: i32 = add nuw t4, Constant:i32&amp;lt;8&amp;gt;
  t26: f64,ch = load&amp;lt;(load 8 from %ir.pb + 8)&amp;gt; t0, t25, undef:i32
  t32: f64,ch = load&amp;lt;(load 8 from %ir.pa)&amp;gt; t0, t2, undef:i32
    t33: i32 = add nuw t2, Constant:i32&amp;lt;8&amp;gt;
  t34: f64,ch = load&amp;lt;(load 8 from %ir.pa + 8)&amp;gt; t0, t33, undef:i32
  t39: ch = TokenFactor t32:1, t34:1, t24:1, t26:1
        t16: f64 = EXTRACT_SUBREG t11, TargetConstant:i32&amp;lt;9&amp;gt;
      t43: ch = store&amp;lt;(store 8 into %ir.pc)&amp;gt; t39, t16, t6, undef:i32
        t18: f64 = EXTRACT_SUBREG t11, TargetConstant:i32&amp;lt;10&amp;gt;
        t21: i32 = add nuw t6, Constant:i32&amp;lt;8&amp;gt;
      t40: ch = store&amp;lt;(store 8 into %ir.pc + 8)&amp;gt; t39, t18, t21, undef:i32
    t42: ch = TokenFactor t43, t40
  t14: ch = ARMISD::RET_FLAG t42
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point the input SelectionDAG can be “instruction selected”. This
gives us the output SelectionDAG.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;===== Instruction selection ends:
Selected selection DAG: %bb.0 'test_vector:'
SelectionDAG has 30 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %0
  t4: i32,ch = CopyFromReg t0, Register:i32 %1
  t6: i32,ch = CopyFromReg t0, Register:i32 %2
  t32: f64,ch = VLDRD&amp;lt;Mem:(load 8 from %ir.pa)&amp;gt; t2, TargetConstant:i32&amp;lt;0&amp;gt;, TargetConstant:i32&amp;lt;14&amp;gt;, Register:i32 $noreg, t0
  t24: f64,ch = VLDRD&amp;lt;Mem:(load 8 from %ir.pb)&amp;gt; t4, TargetConstant:i32&amp;lt;0&amp;gt;, TargetConstant:i32&amp;lt;14&amp;gt;, Register:i32 $noreg, t0
  t34: f64,ch = VLDRD&amp;lt;Mem:(load 8 from %ir.pa + 8)&amp;gt; t2, TargetConstant:i32&amp;lt;2&amp;gt;, TargetConstant:i32&amp;lt;14&amp;gt;, Register:i32 $noreg, t0
  t26: f64,ch = VLDRD&amp;lt;Mem:(load 8 from %ir.pb + 8)&amp;gt; t4, TargetConstant:i32&amp;lt;2&amp;gt;, TargetConstant:i32&amp;lt;14&amp;gt;, Register:i32 $noreg, t0
  t39: ch = TokenFactor t32:1, t34:1, t24:1, t26:1
      t36: v2f64 = INSERT_SUBREG IMPLICIT_DEF:v2f64, t32, TargetConstant:i32&amp;lt;9&amp;gt;
    t37: v2f64 = INSERT_SUBREG t36, t34, TargetConstant:i32&amp;lt;10&amp;gt;
      t29: v2f64 = INSERT_SUBREG IMPLICIT_DEF:v2f64, t24, TargetConstant:i32&amp;lt;9&amp;gt;
    t30: v2f64 = INSERT_SUBREG t29, t26, TargetConstant:i32&amp;lt;10&amp;gt;
  t11: v2f64 = VADDDx2 t37, t30, TargetConstant:i32&amp;lt;14&amp;gt;, Register:i32 $noreg
        t16: f64 = EXTRACT_SUBREG t11, TargetConstant:i32&amp;lt;9&amp;gt;
      t43: ch = VSTRD&amp;lt;Mem:(store 8 into %ir.pc)&amp;gt; t16, t6, TargetConstant:i32&amp;lt;0&amp;gt;, TargetConstant:i32&amp;lt;14&amp;gt;, Register:i32 $noreg, t39
        t18: f64 = EXTRACT_SUBREG t11, TargetConstant:i32&amp;lt;10&amp;gt;
      t40: ch = VSTRD&amp;lt;Mem:(store 8 into %ir.pc + 8)&amp;gt; t18, t6, TargetConstant:i32&amp;lt;2&amp;gt;, TargetConstant:i32&amp;lt;14&amp;gt;, Register:i32 $noreg, t39
    t42: ch = TokenFactor t43, t40
  t14: ch = BX_RET TargetConstant:i32&amp;lt;14&amp;gt;, Register:i32 $noreg, t42
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fadd&lt;/code&gt; now is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; as expected. The other operations are also
opcodes of the ARM backend. Now this output SelectionDAG is linearised
(scheduled) to obtain a machine basic block. There is only one in this function,
but all the basic blocks would be put together for the machine function.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function test_vector: IsSSA, TracksLiveness
Function Live Ins: $r0 in %0, $r1 in %1, $r2 in %2

bb.0 (%ir-block.0):
  liveins: $r0, $r1, $r2
  %2:gpr = COPY $r2
  %1:gpr = COPY $r1
  %0:gpr = COPY $r0
  %3:dpr = VLDRD %1:gpr, 0, 14, $noreg :: (load 8 from %ir.pb)
  %4:dpr = VLDRD %1:gpr, 2, 14, $noreg :: (load 8 from %ir.pb + 8)
  %5:dpr = VLDRD %0:gpr, 0, 14, $noreg :: (load 8 from %ir.pa)
  %6:dpr = VLDRD %0:gpr, 2, 14, $noreg :: (load 8 from %ir.pa + 8)
  %8:dprx2 = IMPLICIT_DEF
  %7:dprx2 = INSERT_SUBREG %8:dprx2(tied-def 0), killed %3:dpr, %subreg.dsub_len2_0
  %10:dprx2 = IMPLICIT_DEF
  %9:dprx2 = INSERT_SUBREG %10:dprx2(tied-def 0), killed %5:dpr, %subreg.dsub_len2_0
  %11:dprx2 = INSERT_SUBREG %7:dprx2(tied-def 0), killed %4:dpr, %subreg.dsub_len2_1
  %12:dprx2 = INSERT_SUBREG %9:dprx2(tied-def 0), killed %6:dpr, %subreg.dsub_len2_1
  %13:dprx2 = VADDDx2 killed %12:dprx2, killed %11:dprx2, 14, $noreg
  %14:dpr = COPY %13.dsub_len2_1:dprx2
  VSTRD killed %14:dpr, %2:gpr, 2, 14, $noreg :: (store 8 into %ir.pc + 8)
  %15:dpr = COPY %13.dsub_len2_0:dprx2
  VSTRD killed %15:dpr, %2:gpr, 0, 14, $noreg :: (store 8 into %ir.pc)
  BX_RET 14, $noreg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then the custom inserter runs and adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; where due. In this case
right before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function test_vector: IsSSA, TracksLiveness
Function Live Ins: $r0 in %0, $r1 in %1, $r2 in %2

bb.0 (%ir-block.0):
  liveins: $r0, $r1, $r2
  %2:gpr = COPY $r2
  %1:gpr = COPY $r1
  %0:gpr = COPY $r0
  %3:dpr = VLDRD %1:gpr, 0, 14, $noreg :: (load 8 from %ir.pb)
  %4:dpr = VLDRD %1:gpr, 2, 14, $noreg :: (load 8 from %ir.pb + 8)
  %5:dpr = VLDRD %0:gpr, 0, 14, $noreg :: (load 8 from %ir.pa)
  %6:dpr = VLDRD %0:gpr, 2, 14, $noreg :: (load 8 from %ir.pa + 8)
  %8:dprx2 = IMPLICIT_DEF
  %7:dprx2 = INSERT_SUBREG %8:dprx2(tied-def 0), killed %3:dpr, %subreg.dsub_len2_0
  %10:dprx2 = IMPLICIT_DEF
  %9:dprx2 = INSERT_SUBREG %10:dprx2(tied-def 0), killed %5:dpr, %subreg.dsub_len2_0
  %11:dprx2 = INSERT_SUBREG %7:dprx2(tied-def 0), killed %4:dpr, %subreg.dsub_len2_1
  %12:dprx2 = INSERT_SUBREG %9:dprx2(tied-def 0), killed %6:dpr, %subreg.dsub_len2_1
  dead %16:gpr, dead %17:gprnopc = VFPSETLEN 1, implicit-def $fpscr
  %13:dprx2 = VADDDx2 killed %12:dprx2, killed %11:dprx2, 14, $noreg, implicit $fpscr
  %14:dpr = COPY %13.dsub_len2_1:dprx2
  VSTRD killed %14:dpr, %2:gpr, 2, 14, $noreg :: (store 8 into %ir.pc + 8)
  %15:dpr = COPY %13.dsub_len2_0:dprx2
  VSTRD killed %15:dpr, %2:gpr, 0, 14, $noreg :: (store 8 into %ir.pc)
  BX_RET 14, $noreg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may be wondering how is it that the 4 loads and the 2 stores have 
become 2 load multiples and 1 store multiple. This is due a later pass
in the ARM backend that knows how to optimise those consecutive loads.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# *** IR Dump After ARM load / store optimization pass (arm-ldst-opt) ***:
# Machine code for function test_vector: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
Function Live Ins: $r0, $r1, $r2

bb.0 (%ir-block.0):
  liveins: $r0, $r1, $r2, $r4, $lr
  $sp = frame-setup STMDB_UPD $sp(tied-def 0), 14, $noreg, killed $r4, killed $lr
  frame-setup CFI_INSTRUCTION def_cfa_offset 8
  frame-setup CFI_INSTRUCTION offset $lr, -4
  frame-setup CFI_INSTRUCTION offset $r4, -8
  VLDMDIA killed $r1, 14, $noreg, def $d4, def $d5, implicit-def $d4_d5x2 :: (load 8 from %ir.pb), (load 8 from %ir.pb + 8)
  VLDMDIA killed $r0, 14, $noreg, def $d6, def $d7, implicit-def $d6_d7x2 :: (load 8 from %ir.pa), (load 8 from %ir.pa + 8)
  dead renamable $r0, dead renamable $r1 = VFPSETLEN 1, implicit-def $fpscr
  renamable $d4_d5x2 = VADDDx2 killed renamable $d6_d7x2, killed renamable $d4_d5x2, 14, $noreg, implicit $fpscr
  VSTMDIA killed $r2, 14, $noreg, $d4, $d5 :: (store 8 into %ir.pc), (store 8 into %ir.pc + 8)
  $r4 = VMRS 14, $noreg, implicit $fpscr
  $r4 = BICri $r4, 458752, 14, $noreg, $noreg
  VMSR $r4, 14, $noreg, implicit-def $fpscr
  $sp = frame-destroy LDMIA_RET $sp(tied-def 0), 14, $noreg, def $r4, def $pc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;Final observation&lt;/h2&gt;

&lt;p&gt;What happens if our IR does two adds?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;vector2.ll&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%t1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%t2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pd&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, we get the following output&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;test_vector2:
	.fnstart
@ %bb.0:
	vldmia	r0, {d6, d7}
	mov	r0, #65536
	vldmia	r1, {d4, d5}
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	orr	r1, r1, r0
	mov	r0, #65536
	vmsr	fpscr, r1
	vadd.f64	d4, d6, d4
	vldmia	r2, {d6, d7}
	vmrs	r1, fpscr
	bic	r1, r1, #458752
	orr	r1, r1, r0
	vmsr	fpscr, r1
	vadd.f64	d4, d4, d6
	vstmia	r3, {d4, d5}
	bx	lr&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see we are setting the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; twice. But once should
be enough: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; is already encoding vector length 2 when we’re about to
execute the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vadd.f64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In a next installment we will see how to improve this and emit only the required
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; instructions.&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><summary type="html">In the last chapter we devised a way to tame the issue with fpscr. Today we are going to complete the code generation bits that we are still missing so we can start emitting code.</summary></entry><entry><title type="html">Fun with vectors in the Raspberry Pi 1 - Part 3</title><link href="https://thinkingeek.com/2021/06/26/raspberry-vectors-part-3/" rel="alternate" type="text/html" title="Fun with vectors in the Raspberry Pi 1 - Part 3" /><published>2021-06-26T05:55:00+00:00</published><updated>2021-06-26T05:55:00+00:00</updated><id>https://thinkingeek.com/2021/06/26/raspberry-vectors-part-3</id><content type="html" xml:base="https://thinkingeek.com/2021/06/26/raspberry-vectors-part-3/">&lt;p&gt;In the last chapter we modelled the storage in form of pairs and quadruples of
registers that we will use for vectors of double and single precision,
respectively.&lt;/p&gt;

&lt;p&gt;But before we can do anything we need to deal with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;The way to machine instructions&lt;/h1&gt;

&lt;p&gt;LLVM is famously known for its intermediate representation (IR) called LLVM
IR. Compilers, however, and LLVM is not an exception, cannot do their job with
just a single intermediate representation. The reason is that different steps
in the compilation pipeline have different requirements. No IR can cater to
all of them at the same time.&lt;/p&gt;

&lt;h2&gt;SelectionDAG&lt;/h2&gt;

&lt;p&gt;So, during code generation LLVM goes through two intermediate representations.
LLVM IR is lowered, one basic block at a time, into a graph representation
called &lt;a href=&quot;https://llvm.org/docs/CodeGenerator.html#instruction-selection-section&quot;&gt;SelectionDAG&lt;/a&gt;.
It is called SelectionDAG because its goal is to do one of the main tasks of
any backend: &lt;a href=&quot;https://en.wikipedia.org/wiki/Instruction_selection&quot;&gt;instruction selection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instruction selection can be understood as taking a directed acyclic graph
(DAG) or a tree (which is a restricted form of DAG) and “tiling” it. This is,
we will group several connected nodes and replace them with one or more nodes.
Those new nodes correspond to actual instructions of the machine we target.&lt;/p&gt;

&lt;p&gt;In the context of LLVM, instruction selection goes from what it is called the
input DAG, built using the information from LLVM IR, to what is called the
output DAG, where the nodes are instructions. One important difference between
the input DAG and the output DAG is that the input DAG operates at the level of
machine types (a finite set of types many of which have equivalent LLVM IR
types) while the output DAG operates at the level of register classes.&lt;/p&gt;

&lt;p&gt;Instruction selection completes when the output DAG is linearized, this is, a
schedule is determined for it. Now the nodes of the output DAG are converted
into the second intermediate representation used by LLVM in code generation.&lt;/p&gt;

&lt;h2&gt;Machine IR&lt;/h2&gt;

&lt;p&gt;This second intermediate representation is called Machine IR or MIR (this is
unrelated to &lt;a href=&quot;https://blog.rust-lang.org/2016/04/19/MIR.html&quot;&gt;Rust MIR&lt;/a&gt;). MIR
is a more conventional representation where each &lt;em&gt;machine function&lt;/em&gt; is a graph
of &lt;em&gt;machine basic blocks&lt;/em&gt; and each (machine) basic block is a sequence of
&lt;a href=&quot;https://llvm.org/docs/CodeGenerator.html#the-machineinstr-class&quot;&gt;&lt;em&gt;machine instructions&lt;/em&gt;&lt;/a&gt;.  One way to understand machine instructions is looking
at them as containers of operands along with an operation code (or &lt;em&gt;opcode&lt;/em&gt;).
Machine instructions can have different kinds of operands but commonly they are
registers (of some specific register class) or immediates (i.e. a constant like
42).&lt;/p&gt;

&lt;p&gt;Operands of machine instructions can be &lt;em&gt;explicit&lt;/em&gt; or &lt;em&gt;implicit&lt;/em&gt;. Explicit
operands are those that are encoded as part of the instruction and they can be
inputs or outputs. Explicit operands are the common ones and what we
intuitively understand for operands.  Implicit operands are those that are
inputs or outputs of the instruction but are not explicitly encoded in the
instruction.&lt;/p&gt;

&lt;p&gt;For instance, in an architecture like Arm, conditional branches use (read)
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpsr&lt;/code&gt; register (later renamed into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apsr&lt;/code&gt; in Armv7-A) that has been
defined (written) earlier usually in a comparison.  That register is an
implicit operand in those instructions because it is not encoded in the
instruction itself. Instead, instructions only encode things like the operands
being compared or, for the branch instruction, the target of the branch (where
we jump to) and the branching condition (when whe have to jump), etc.&lt;/p&gt;

&lt;p&gt;Machine instructions need to know what operands they are using and defining.
If they fail to do so, later scheduling passes that operate in the MIR may
reorder instructions and break the semantics of the represented code.&lt;/p&gt;

&lt;h2&gt;Virtual registers&lt;/h2&gt;

&lt;p&gt;Most compilation infrastructures use the concept of &lt;em&gt;virtual register&lt;/em&gt;. During
compilation the compiler assumes that there is an infinite number of registers.
Those registers are called &lt;em&gt;virtual&lt;/em&gt; and belong to a register class. This
largely simplifies code generation particularly because LLVM favours using
Static Single Assignment (SSA). Under SSA, virtual registers are only defined
once (i.e. assigned a value) and can be used many times. This constrained form
is very beneficial for analysis because removes the ambiguity of knowing what
was the last update to a register.&lt;/p&gt;

&lt;p&gt;The opposite of a virtual register is a &lt;em&gt;physical register&lt;/em&gt; (in compilers
physical registers correspond to what in computer architecture are known by
&lt;em&gt;architectural registers&lt;/em&gt;). Physical registers are not subject to the regime of
SSA: they can be redefined many times. This makes analysing them a bit harder.&lt;/p&gt;

&lt;p&gt;Virtual registers do not exist in CPUs. So a process called &lt;em&gt;register
allocation&lt;/em&gt; assigns physical registers in place of virtual registers. This is
an effective approach because the life spans of virtual registers is often very
short. This means that, in general, not many physical registers are needed at
the same time.  However if this happens, register allocation uses memory so it
can temporarily store a value held in a register to retrieve it later. This
store operation is commonly known as a &lt;em&gt;spill&lt;/em&gt; and its later retrieval it is
known as a &lt;em&gt;reload&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Machine instructions in MIR can have either virtual register operands and
physical register operands. After register allocation, no virtual register
remains in the machine function. This is largely true but some very late code
generation steps may be easier to implement using virtual registers. LLVM
provides a simplified mechanism to assign those virtual registers to physical
registers without involving a full register allocation process.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; is a physical register so unfortunately we will not be able to benefit
the SSA advantages that virtual registers enjoy.&lt;/p&gt;

&lt;h1&gt;Approach&lt;/h1&gt;

&lt;p&gt;The approach I chose is similar, if simpler, to the one used in the RISC-V
backend of LLVM to support vectors. By using &lt;em&gt;pseudo instructions&lt;/em&gt; we define
vector operations and handle them as needed.&lt;/p&gt;

&lt;p&gt;For instance, an instruction like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vadd.f64&lt;/code&gt;, is represented in the ARM backend
of LLVM with a machine instruction with opcode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt; is currently
used for scalar operations. Our idea is to introduce a pseudo instruction
called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt;. Those pseudo instructions will use the register class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2&lt;/code&gt;
that we defined already. Similarly for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vadd.f32&lt;/code&gt;, the instruction is called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDS&lt;/code&gt; and we will define the pseudo instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDSx4&lt;/code&gt; that uses the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPRx4&lt;/code&gt; register class. We will repeat this operation for all the 12
instructions (in their two variants for double and single precision) that
honour the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By using pseudo instructions we can make SelectionDAG to select those
pseudo instructions. For instance a LLVM IR like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;nv&quot;&gt;%vc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%va&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%vb&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will be selected using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; instruction.&lt;/p&gt;

&lt;p&gt;A pseudo instruction is no different to an instruction for the purpose of code
generation. The difference to actual instructions, is that the target does not
have such instruction. So at some point we will need to expand it into real
instructions. This happens at a later stage, after register allocation and will
be part of a later installment in this series.&lt;/p&gt;

&lt;h2&gt;Tracking fpscr&lt;/h2&gt;

&lt;p&gt;Currently the ARM backend assumes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; does not have to be tracked for
scalar operations. Technically they do depend on the rounding mode in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;
but this part is not very well defined in LLVM (only recently &lt;a href=&quot;https://llvm.org/docs/LangRef.html#constrained-floating-point-intrinsics&quot;&gt;constrained
floating point operations&lt;/a&gt;
have been introduced).&lt;/p&gt;

&lt;p&gt;However, if we plan to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; in the same code we need to
make sure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; has the right value for each
instruction. The easiest way to do that is to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; to the required
value right before every instruction.&lt;/p&gt;

&lt;p&gt;In order to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; we will add a pseudo instruction called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;let Defs = [FPSCR],
    hasNoSchedulingInfo = 1,
    mayLoad = 0,
    mayStore = 0,
    hasSideEffects = 0 in
def VFPSETLEN : PseudoInst&amp;lt;(outs GPR:$scratch1, GPRnopc:$scratch2),
                           (ins imm0_7:$len),
                           IIC_fpSTAT, []&amp;gt;,
                           Requires&amp;lt;[HasVFP2]&amp;gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tablegen definition of a pseudo instruction has a lot of information.&lt;/p&gt;

&lt;p&gt;First, this instruction has one input called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$len&lt;/code&gt;. This input is an immediate
that ranges from 0 to 7 (3 bits). This is defined by the operand kind specifier
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imm0_7&lt;/code&gt; which is conveniently already defined in the ARM backend.&lt;/p&gt;

&lt;p&gt;Second, this instruction has two register outputs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$scratch1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$scratch2&lt;/code&gt;.
We will need those later on when we expand this pseudo instruction into the
actual instructions that set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;. Note the different
register classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPR&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPRnopc&lt;/code&gt;. The latter does not allow to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pc&lt;/code&gt;
register (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r15&lt;/code&gt; in AArch32). We do this because the instructions used in the
expansion also have this restriction in the way they use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$scratch2&lt;/code&gt;. These two
output registers will be initially virtual registers and then register
allocation will assign two physical registers for them. This ensures we can
expand the pseudo instruction safely.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IIC_fpSTAT&lt;/code&gt; is an &lt;em&gt;instruction itinerary&lt;/em&gt; and we can ignore it for
now: it is used for scheduling. Then we specify this is only for VFPv2 which we
do using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Requires&amp;lt;[HasVFP2]&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tablegen allows to &lt;em&gt;push&lt;/em&gt; attributes into definitions using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; syntax,
above the definition.  This is useful when we want a number of definitions to
have the same values in the attributes by avoiding having to specify it in each
definition.&lt;/p&gt;

&lt;p&gt;A first attribute is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Defs = [FPSCR]&lt;/code&gt; that means this instruction defines
(writes) the register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;. When instruction selection finally creates the
machine instructions (of MIR) it will add an implicit defining operand for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other attributes are used to state that this instruction does not have
scheduling info, does not load memory, does not store memory and does not have
any further unmodelled side-effects.&lt;/p&gt;

&lt;p&gt;It should be possible now to mark &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uses = [FPSCR]&lt;/code&gt;,
so after instruction selection they have an implicit use of the register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;.
However if we do so, then the instructions are reading a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; that nobody
wrote and this is a bit odd. We will do something slightly different.&lt;/p&gt;

&lt;h2&gt;How to configure fpscr&lt;/h2&gt;

&lt;p&gt;It is possible to mark instructions (including pseudo instructions) with the
attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasCustomInserter&lt;/code&gt;. When doing this an extra callback is invoked for
each instruction, right before finishing instruction selection. This allows
the compiler to tweak or change the instruction selection.&lt;/p&gt;

&lt;p&gt;The idea is that for every instruction like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDSx4&lt;/code&gt;, …
the custom inserter will prepend the instruction with an appropriate
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; and will mark the instruction to implicitly use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We mentioned there are 12 instructions in VFPv2 that honour the vector length.
Because in LLVM those are split between the single precision and the double
precision there are 24 machine instructions. Because we are adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x4&lt;/code&gt; forms, we end with 48 cases. This is perhaps too many cases to handle
individually, so one option we have is to create a table that gives us
information for each instruction. There is a tablegen backend in LLVM to create
&lt;a href=&quot;https://llvm.org/docs/TableGen/BackEnds.html#generic-tables&quot;&gt;generic searchable tables&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Generic table&lt;/h2&gt;

&lt;p&gt;Firt we need to specify what we will have as elements of that table.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;class VFPPseudo {
  // Note: Pseudo will be the same as BaseInstr for VectorLength == 000b
  Instruction Pseudo = !cast&amp;lt;Instruction&amp;gt;(NAME); // Used as a key.
  Instruction BaseInstr;
  bits&amp;lt;3&amp;gt; VectorLength; // Encoded with offset +1 (i.e. 000b = 1, 111b = 8)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Any tablegen definition of this class (including those due to to inheritance)
will be part of the table. Each element of the table will contain 3 fields. The
first field is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pseudo&lt;/code&gt; instruction and will be used for lookups in the
table. This field is a bit of a misnomer, specially for the existing scalar
instructions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDS&lt;/code&gt; but I think we can live with this for
now.&lt;/p&gt;

&lt;p&gt;The second field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BaseInstr&lt;/code&gt; links each pseudo instruction with its base one.
This is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDSx4&lt;/code&gt; will both be linked to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDS&lt;/code&gt;
respectively.&lt;/p&gt;

&lt;p&gt;A final field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VectorLength&lt;/code&gt; encoded in the same way as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we know what every element of the table will contain, we can define
the table itself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;def VFPPseudosTable : GenericTable {
  let FilterClass = &quot;VFPPseudo&quot;;
  let CppTypeName = &quot;PseudoInfo&quot;;
  let Fields = [ &quot;Pseudo&quot;, &quot;BaseInstr&quot;, &quot;VectorLength&quot; ];
  let PrimaryKey = [ &quot;Pseudo&quot; ];
  let PrimaryKeyName = &quot;getPseudoInfo&quot;;
  let PrimaryKeyEarlyOut = true;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first field, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FilterClass&lt;/code&gt;, is the class whose definitions will make up the
table. This is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPPseudo&lt;/code&gt; we defined above. Field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CppTypeName&lt;/code&gt; will be
used as the class generated in C++. This class will have a number of fields
that we specify in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fields&lt;/code&gt; attributes. We specify that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pseudo&lt;/code&gt; will be
used as primary key, this is, used to look up elements in the table (the term
&lt;em&gt;primary key&lt;/em&gt; comes from databases). Field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrimaryKeyName&lt;/code&gt; is the name of the
method we will use on the table to retrieve an element. This function will
receive the values of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrimaryKey&lt;/code&gt; for the lookup: in this case the opcode
of an instruction. Finaly the field &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrimaryKeyEarlyOut&lt;/code&gt; is a small
optimisation when doing lookups in large spaces like the instructions.&lt;/p&gt;

&lt;p&gt;OK. How do we use this? As mentioned earlier, any class that inherits from
this one will automatically be part of the table. So we will first label
all the scalar operations. Before, that, let’s create a convenience subclass
for them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;class VFPPseudoScalar : VFPPseudo {
  let BaseInstr = !cast&amp;lt;Instruction&amp;gt;(NAME);
  let VectorLength = 0b000;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This subclass hardcodes some values for scalar operations: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VectorLength&lt;/code&gt;
will always be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0b000&lt;/code&gt;, which encodes a value of 1 in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field. The base
instruction will be itself. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAME&lt;/code&gt; is a special identifier which evaluates
to the string of the name of the current tablegen definition. The cast is
needed to convert that string to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Instruction&lt;/code&gt; definition identifier.&lt;/p&gt;

&lt;p&gt;With this we can now annotate the existing operations. I will show only
here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDS&lt;/code&gt; but this can be extended to the other ones.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt; //===----------------------------------------------------------------------===//
 // FP Binary Operations.
 //
 
&lt;span class=&quot;gi&quot;&gt;+let usesCustomInserter = 1 in
&lt;/span&gt; let TwoOperandAliasConstraint = &quot;$Dn = $Dd&quot; in
 def VADDD  : ADbI&amp;lt;0b11100, 0b11, 0, 0,
                   (outs DPR:$Dd), (ins DPR:$Dn, DPR:$Dm),
                   IIC_fpALU64, &quot;vadd&quot;, &quot;.f64\t$Dd, $Dn, $Dm&quot;,
                   [(set DPR:$Dd, (fadd DPR:$Dn, (f64 DPR:$Dm)))]&amp;gt;,
&lt;span class=&quot;gd&quot;&gt;-             Sched&amp;lt;[WriteFPALU64]&amp;gt;;
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+             Sched&amp;lt;[WriteFPALU64]&amp;gt;,
+             VFPPseudoScalar;
&lt;/span&gt; 
&lt;span class=&quot;gi&quot;&gt;+let usesCustomInserter = 1 in
&lt;/span&gt; let TwoOperandAliasConstraint = &quot;$Sn = $Sd&quot; in
 def VADDS  : ASbIn&amp;lt;0b11100, 0b11, 0, 0,
                    (outs SPR:$Sd), (ins SPR:$Sn, SPR:$Sm),
                    IIC_fpALU32, &quot;vadd&quot;, &quot;.f32\t$Sd, $Sn, $Sm&quot;,
                    [(set SPR:$Sd, (fadd SPR:$Sn, SPR:$Sm))]&amp;gt;,
&lt;span class=&quot;gd&quot;&gt;-             Sched&amp;lt;[WriteFPALU32]&amp;gt; {
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+             Sched&amp;lt;[WriteFPALU32]&amp;gt;,
+             VFPPseudoScalar {
&lt;/span&gt;   // Some single precision VFP instructions may be executed on both NEON and
   // VFP pipelines on A8.
   let D = VFPNeonA8Domain;
 }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that we need to make sure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usesCustomInserter&lt;/code&gt; is set to 1 so the hook
is invoked for these instructions.&lt;/p&gt;

&lt;p&gt;In order to make the generated table available to C++ we still need to make
some changes in files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/lib/Target/ARM/Utils/ARMBaseInfo.cpp&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/lib/Target/ARM/Utils/ARMBaseInfo.h&lt;/code&gt;. This will make sure the
tablegen-generated C++ is included appropriately.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/llvm/lib/Target/ARM/Utils/ARMBaseInfo.cpp b/llvm/lib/Target/ARM/Utils/ARMBaseInfo.cpp
index 3356d56481e5..4ced4d57109a 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/llvm/lib/Target/ARM/Utils/ARMBaseInfo.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/llvm/lib/Target/ARM/Utils/ARMBaseInfo.cpp
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -74,4 +74,10 @@&lt;/span&gt; namespace ARMBankedReg {
 #define GET_BANKEDREG_IMPL
 #include &quot;ARMGenSystemRegister.inc&quot;
 } // end namespce ARMSysReg
&lt;span class=&quot;gi&quot;&gt;+
+// VFP Pseudo Instructions
+namespace VFPPseudos {
+#define GET_VFPPseudosTable_IMPL
+#include &quot;ARMGenSystemRegister.inc&quot;
+} // namespace VFPPseudos
&lt;/span&gt; } // end namespace llvm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/llvm/lib/Target/ARM/Utils/ARMBaseInfo.h b/llvm/lib/Target/ARM/Utils/ARMBaseInfo.h
index 80b7276adb4e..3b0346d790aa 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/llvm/lib/Target/ARM/Utils/ARMBaseInfo.h
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/llvm/lib/Target/ARM/Utils/ARMBaseInfo.h
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -232,6 +232,19 @@&lt;/span&gt; namespace ARMBankedReg {
   #include &quot;ARMGenSystemRegister.inc&quot;
 } // end namespace ARMBankedReg
 
&lt;span class=&quot;gi&quot;&gt;+// VFP Pseudo Instructions
+namespace VFPPseudos {
+using namespace ARM;
+struct PseudoInfo {
+  unsigned Pseudo;
+  unsigned BaseInst;
+  // Encoded with +1 offset (i.e. 000 means 1)
+  unsigned VectorLength;
+};
+#define GET_VFPPseudosTable_DECL
+#include &quot;ARMGenSystemRegister.inc&quot;
+} // namespace VFPPseudos
+
&lt;/span&gt; } // end namespace llvm
 
 #endif // LLVM_LIB_TARGET_ARM_UTILS_ARMBASEINFO_H&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;The pseudo instructions&lt;/h2&gt;

&lt;p&gt;Ok so now we have annotated our existing scalar instructions to have
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VectorLength&lt;/code&gt; equals to 1. Now it is a good moment to introduce our
pseudo instructions. Again I’ll show only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDSx4&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;let usesCustomInserter = 1 in {

// VectorLength=2
let VectorLength = 0b001 in {

let BaseInstr = VADDD in
def VADDDx2  : PseudoInst&amp;lt;(outs DPRx2:$Dd), (ins DPRx2:$Dn, DPRx2:$Dm, pred:$p),
                  IIC_fpALU64,
                  [(set DPRx2:$Dd, (fadd DPRx2:$Dn, (v2f64 DPRx2:$Dm)))]&amp;gt;,
             Sched&amp;lt;[WriteFPALU64]&amp;gt;,
             Requires&amp;lt;[HasVFP2]&amp;gt;,
             VFPPseudo;

} // VectorLength

// VectorLength=4
let VectorLength = 0b011 in {

let BaseInstr = VABSS in
def VABSSx4  : PseudoInst&amp;lt;(outs SPRx4:$Dd), (ins SPRx4:$Dm, pred:$p),
                  IIC_fpUNA32,
                  [(set SPRx4:$Dd, (fabs (v4f32 SPRx4:$Dm)))]&amp;gt;,
             Sched&amp;lt;[WriteFPALU32]&amp;gt;,
             Requires&amp;lt;[HasVFP2]&amp;gt;,
             VFPPseudo;

} // VectorLength

} // usesCustomInserter&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look closely you will see that these are almost identical to their
scalar counterparts. That is intentional because we want these machine
instructions be structurally identical as their scalar counterpart ones. The
only differences are in the register classes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPR&lt;/code&gt; is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPR&lt;/code&gt; is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPRx4&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;These definitions, like the scalar ones, include what is called a &lt;em&gt;pattern&lt;/em&gt; for
instruction selection. For instance, the one for VADDDx2 includes this
pattern.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;   [(set DPRx2:$Dd, (fadd DPRx2:$Dn, (v2f64 DPRx2:$Dm)))]&amp;gt;,&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This basically says that we can match an input selection DAG with opcode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fadd&lt;/code&gt;
that receives two input registers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$Dn&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$Dm&lt;/code&gt; to set a register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$Dd&lt;/code&gt; with
the current instruction. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2&lt;/code&gt; is here the register class used for those
registers. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; is a type and it must be representable by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2&lt;/code&gt;, but if
you recall we did this in the previous installment when we created the register
class.&lt;/p&gt;

&lt;div style=&quot;padding: 0.7em; background-color: honeydew;&quot;&gt;
  &lt;p&gt;Tablegen can in general infer the types of the operands of the patterns. So
specifying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; in the pattern fragment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(v2f64 DPRx2:$Dm)&lt;/code&gt; is redundant.&lt;/p&gt;

  &lt;p&gt;However tablegen cannot infer the types if the involved register class allows
more than one machine type. In the ARM backend, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPR&lt;/code&gt; register class
contains more than one machine type, hence the pattern needs to at least
specify one type (the rest of types can be inferred because the properties of
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fadd&lt;/code&gt; SelectionDAG node).&lt;/p&gt;

  &lt;p&gt;If you check the above definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDS&lt;/code&gt; you will see that its pattern does
not include a type (in contrast to the one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt;): the reason is that the
register class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SPR&lt;/code&gt; only includes the machine type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f32&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;I decided to leave at least one type for clarity as a balanced alternative
to cluttering everything with types.&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;Custom inserter&lt;/h1&gt;

&lt;p&gt;Now we are in a situation in which we can finally use the custom inserter
to insert the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; instruction.&lt;/p&gt;

&lt;p&gt;We can do that in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/lib/Target/ARMISelLowering.cpp&lt;/code&gt;. The hook
called per instruction is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EmitInstrWithCustomInserter&lt;/code&gt;. We will check
if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MachineInstr&lt;/code&gt; is included in our table of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPPseudos&lt;/code&gt; we have defined
above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ARMTargetLowering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmitInstrWithCustomInserter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MachineInstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                               &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VFPPseudos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PseudoInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;VFPPseudos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPseudoInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOpcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subtarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasVFP2Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Don't do anything if we are not generating code for VFP2.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;setFPCSRLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// rest of the code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We will query the table &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPPseudos&lt;/code&gt;. If an instruction appears there it means
we need to make sure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field correctly set. This is
what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; instruction was for.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARMTargetLowering&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFPCSRLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MachineBasicBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MachineInstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VFPPseudos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PseudoInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MachineFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MachineRegisterInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MRI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getRegInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TargetInstrInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subtarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstrInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DebugLoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDebugLoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MRI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createVirtualRegister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPRRegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MRI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createVirtualRegister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPRnopcRegClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;BuildMI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TII&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPSETLEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scratch2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addImm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VFPInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VectorLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Now mark this instruction that it uses FPCSR implicitly.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOperand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MachineOperand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateReg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ARM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FPSCR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* isDef */&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                          &lt;span class=&quot;cm&quot;&gt;/* isImp */&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We basically create two virtual registers of the appropriate class for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt;
and then we build a machine instruction corresponding to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; itself.
Note how we mark the scratch registers as dead: nobody will use their values
after this instruction.&lt;/p&gt;

&lt;p&gt;We finally insert an implicit operand to the current instruction (not to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDDx2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDSx4&lt;/code&gt;, etc) in order to signify
that this instruction now uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point we are still not able to lower vector operations because we are
still missing a few bits which we will see in next installments. However we
can see the impact of our changes in scalar code.&lt;/p&gt;

&lt;p&gt;The following simple IR function can be used to observe the effect of
the custom inserter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@test_scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pa&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%pb&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fadd&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%pc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llc&lt;/code&gt;, the code generator of LLVM, to inspect the machine
instructions. We have to stop right after instruction selection (isel)
finalises because we have still not implemented how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; is to be
lowered and that would cause &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llc&lt;/code&gt; to crash.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;llc &lt;span class=&quot;nt&quot;&gt;-mtriple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;armv6kz-unknown-linux-gnu &lt;span class=&quot;nt&quot;&gt;-mattr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+vfp2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;-stop-after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;finalize-isel &lt;span class=&quot;nt&quot;&gt;-simplify-mir&lt;/span&gt; scalar.ll &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; scalar.mir&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;scalar.mir&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;; ModuleID = 'scalar.ll'&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;source_filename = &quot;scalar.ll&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;target datalayout = &quot;e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;target triple = &quot;armv6kz-unknown-linux-gnu&quot;&lt;/span&gt;
  
  &lt;span class=&quot;s&quot;&gt;define void @test_scalar(double* %pa, double* %pb, double* %pc) #0 {&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;%a = load double, double* %pa, align 8&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;%b = load double, double* %pb, align 8&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;%c = fadd double %a, %b&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;store double %c, double* %pc, align 8&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ret void&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;s&quot;&gt;attributes #0 = { &quot;target-features&quot;=&quot;+vfp2&quot; }&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;s&quot;&gt;test_scalar&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tracksRegLiveness&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;registers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gpr&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gpr&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gpr&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dpr&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dpr&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dpr&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gpr&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gprnopc&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;liveins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$r0'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;virtual-reg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%0'&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$r1'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;virtual-reg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%1'&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$r2'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;virtual-reg&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%2'&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;frameInfo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;maxAlignment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;maxCallFrameSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;machineFunctionInfo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;             &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;bb.0 (%ir-block.0):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;liveins: $r0, $r1, $r2&lt;/span&gt;
  
    &lt;span class=&quot;s&quot;&gt;%2:gpr = COPY $r2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;%1:gpr = COPY $r1&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;%0:gpr = COPY $r0&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;%3:dpr = VLDRD %1, 0, 14 /* CC::al */, $noreg :: (load 8 from %ir.pb)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;%4:dpr = VLDRD %0, 0, 14 /* CC::al */, $noreg :: (load 8 from %ir.pa)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;dead %6:gpr, dead %7:gprnopc = VFPSETLEN 0, implicit-def $fpscr&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;%5:dpr = VADDD killed %4, killed %3, 14 /* CC::al */, $noreg, implicit $fpscr&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;VSTRD killed %5, %2, 0, 14 /* CC::al */, $noreg :: (store 8 into %ir.pc)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;BX_RET 14 /* CC::al */, $noreg&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In line 48 the newly introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPSETLEN&lt;/code&gt; appears. It implicitly defines
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; (physical registers are prepended with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; sign while virtual
registers use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;). And then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VADDD&lt;/code&gt; instruction in line 49 implicitly uses
it.&lt;/p&gt;

&lt;p&gt;This is all still very basic but it is a necessary step for correct code
generation for VFPv2.&lt;/p&gt;

&lt;p&gt;In the next installment we will continue adding the missing bits in the
instruction selection and lowering of operations for vector types.&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><summary type="html">In the last chapter we modelled the storage in form of pairs and quadruples of registers that we will use for vectors of double and single precision, respectively. But before we can do anything we need to deal with fpscr.</summary></entry><entry><title type="html">Fun with vectors in the Raspberry Pi 1 - Part 2</title><link href="https://thinkingeek.com/2021/06/25/raspberry-vectors-part-2/" rel="alternate" type="text/html" title="Fun with vectors in the Raspberry Pi 1 - Part 2" /><published>2021-06-25T12:36:00+00:00</published><updated>2021-06-25T12:36:00+00:00</updated><id>https://thinkingeek.com/2021/06/25/raspberry-vectors-part-2</id><content type="html" xml:base="https://thinkingeek.com/2021/06/25/raspberry-vectors-part-2/">&lt;p&gt;In the &lt;a href=&quot;/2021/06/25/raspberry-vectors-part-1/&quot;&gt;previous installment&lt;/a&gt;
we discussed a bit how to generate code using the vector feature of the CPU of
the Raspberry Pi 1.&lt;/p&gt;

&lt;p&gt;Let’s start hacking LLVM.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1&gt;Registers&lt;/h1&gt;

&lt;p&gt;One way to understand registers in LLVM is a set of storage resources that we
can group in register classes. Those register classes can then be mentioned as
register operands of instructions.&lt;/p&gt;

&lt;p&gt;The register information for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARM&lt;/code&gt; backend (the one used for 32-bit Arm
CPUs, currently known as the AArch32 execution state of the Arm architecture)
is found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm/lib/Target/ARM/ARMRegisterInfo.td&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a &lt;a href=&quot;https://llvm.org/docs/TableGen/&quot;&gt;tablegen&lt;/a&gt; file. Tablegen is a
domain specific language to generate records called &lt;em&gt;definitions&lt;/em&gt;. Each
definition is an instance of a &lt;em&gt;class&lt;/em&gt; and classes define the attributes
that a definition will contain. A tablegen file is then processed by one
or more &lt;em&gt;backends&lt;/em&gt; commonly to generate C++ code. This tablegen-generated C++
code is compiled along with the rest of the C++ code that makes up LLVM. This way
it is relatively quick to update parts of the compiler without having to express
them directly in C++.&lt;/p&gt;

&lt;p&gt;Registers in LLVM are specified using definitions of class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Register&lt;/code&gt;. Most
backends have to specialise this class, so the Arm backend uses a class called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARMFReg&lt;/code&gt; for floating point registers&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;class ARMFReg&amp;lt;bits&amp;lt;16&amp;gt; Enc, string n&amp;gt; : Register&amp;lt;n&amp;gt; {
  let HWEncoding = Enc;
  let Namespace = &quot;ARM&quot;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The single precision floating point registers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&amp;lt;n&amp;gt;&lt;/code&gt;) are defined like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;def S0  : ARMFReg&amp;lt; 0, &quot;s0&quot;&amp;gt;;  def S1  : ARMFReg&amp;lt; 1, &quot;s1&quot;&amp;gt;;
def S2  : ARMFReg&amp;lt; 2, &quot;s2&quot;&amp;gt;;  def S3  : ARMFReg&amp;lt; 3, &quot;s3&quot;&amp;gt;;
def S4  : ARMFReg&amp;lt; 4, &quot;s4&quot;&amp;gt;;  def S5  : ARMFReg&amp;lt; 5, &quot;s5&quot;&amp;gt;;
def S6  : ARMFReg&amp;lt; 6, &quot;s6&quot;&amp;gt;;  def S7  : ARMFReg&amp;lt; 7, &quot;s7&quot;&amp;gt;;
def S8  : ARMFReg&amp;lt; 8, &quot;s8&quot;&amp;gt;;  def S9  : ARMFReg&amp;lt; 9, &quot;s9&quot;&amp;gt;;
def S10 : ARMFReg&amp;lt;10, &quot;s10&quot;&amp;gt;; def S11 : ARMFReg&amp;lt;11, &quot;s11&quot;&amp;gt;;
def S12 : ARMFReg&amp;lt;12, &quot;s12&quot;&amp;gt;; def S13 : ARMFReg&amp;lt;13, &quot;s13&quot;&amp;gt;;
def S14 : ARMFReg&amp;lt;14, &quot;s14&quot;&amp;gt;; def S15 : ARMFReg&amp;lt;15, &quot;s15&quot;&amp;gt;;
def S16 : ARMFReg&amp;lt;16, &quot;s16&quot;&amp;gt;; def S17 : ARMFReg&amp;lt;17, &quot;s17&quot;&amp;gt;;
def S18 : ARMFReg&amp;lt;18, &quot;s18&quot;&amp;gt;; def S19 : ARMFReg&amp;lt;19, &quot;s19&quot;&amp;gt;;
def S20 : ARMFReg&amp;lt;20, &quot;s20&quot;&amp;gt;; def S21 : ARMFReg&amp;lt;21, &quot;s21&quot;&amp;gt;;
def S22 : ARMFReg&amp;lt;22, &quot;s22&quot;&amp;gt;; def S23 : ARMFReg&amp;lt;23, &quot;s23&quot;&amp;gt;;
def S24 : ARMFReg&amp;lt;24, &quot;s24&quot;&amp;gt;; def S25 : ARMFReg&amp;lt;25, &quot;s25&quot;&amp;gt;;
def S26 : ARMFReg&amp;lt;26, &quot;s26&quot;&amp;gt;; def S27 : ARMFReg&amp;lt;27, &quot;s27&quot;&amp;gt;;
def S28 : ARMFReg&amp;lt;28, &quot;s28&quot;&amp;gt;; def S29 : ARMFReg&amp;lt;29, &quot;s29&quot;&amp;gt;;
def S30 : ARMFReg&amp;lt;30, &quot;s30&quot;&amp;gt;; def S31 : ARMFReg&amp;lt;31, &quot;s31&quot;&amp;gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The double precision registers (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&amp;lt;n&amp;gt;&lt;/code&gt;) are defined as registers
that include two single precision registers in it. This is achieved by
first declaring what is called a subregister index.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;def ssub_0  : SubRegIndex&amp;lt;32&amp;gt;;
def ssub_1  : SubRegIndex&amp;lt;32, 32&amp;gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the registers can be defined by telling LLVM that they have two subregister
indices and then linking each subregister index to the corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&amp;lt;n&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&amp;lt;n+1&amp;gt;&lt;/code&gt;
registers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;// Aliases of the F* registers used to hold 64-bit fp values (doubles)
let SubRegIndices = [ssub_0, ssub_1] in {
def D0  : ARMReg&amp;lt; 0,  &quot;d0&quot;, [S0,   S1]&amp;gt;, DwarfRegNum&amp;lt;[256]&amp;gt;;
def D1  : ARMReg&amp;lt; 1,  &quot;d1&quot;, [S2,   S3]&amp;gt;, DwarfRegNum&amp;lt;[257]&amp;gt;;
def D2  : ARMReg&amp;lt; 2,  &quot;d2&quot;, [S4,   S5]&amp;gt;, DwarfRegNum&amp;lt;[258]&amp;gt;;
def D3  : ARMReg&amp;lt; 3,  &quot;d3&quot;, [S6,   S7]&amp;gt;, DwarfRegNum&amp;lt;[259]&amp;gt;;
def D4  : ARMReg&amp;lt; 4,  &quot;d4&quot;, [S8,   S9]&amp;gt;, DwarfRegNum&amp;lt;[260]&amp;gt;;
def D5  : ARMReg&amp;lt; 5,  &quot;d5&quot;, [S10, S11]&amp;gt;, DwarfRegNum&amp;lt;[261]&amp;gt;;
def D6  : ARMReg&amp;lt; 6,  &quot;d6&quot;, [S12, S13]&amp;gt;, DwarfRegNum&amp;lt;[262]&amp;gt;;
def D7  : ARMReg&amp;lt; 7,  &quot;d7&quot;, [S14, S15]&amp;gt;, DwarfRegNum&amp;lt;[263]&amp;gt;;
def D8  : ARMReg&amp;lt; 8,  &quot;d8&quot;, [S16, S17]&amp;gt;, DwarfRegNum&amp;lt;[264]&amp;gt;;
def D9  : ARMReg&amp;lt; 9,  &quot;d9&quot;, [S18, S19]&amp;gt;, DwarfRegNum&amp;lt;[265]&amp;gt;;
def D10 : ARMReg&amp;lt;10, &quot;d10&quot;, [S20, S21]&amp;gt;, DwarfRegNum&amp;lt;[266]&amp;gt;;
def D11 : ARMReg&amp;lt;11, &quot;d11&quot;, [S22, S23]&amp;gt;, DwarfRegNum&amp;lt;[267]&amp;gt;;
def D12 : ARMReg&amp;lt;12, &quot;d12&quot;, [S24, S25]&amp;gt;, DwarfRegNum&amp;lt;[268]&amp;gt;;
def D13 : ARMReg&amp;lt;13, &quot;d13&quot;, [S26, S27]&amp;gt;, DwarfRegNum&amp;lt;[269]&amp;gt;;
def D14 : ARMReg&amp;lt;14, &quot;d14&quot;, [S28, S29]&amp;gt;, DwarfRegNum&amp;lt;[270]&amp;gt;;
def D15 : ARMReg&amp;lt;15, &quot;d15&quot;, [S30, S31]&amp;gt;, DwarfRegNum&amp;lt;[271]&amp;gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ok so we can use a similar strategy for our vector registers. Let’s define
first a couple of new subregister indices. For now let’s focus on double
precision.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;def dsub_len2_0: SubRegIndex&amp;lt;64, -1&amp;gt;;
def dsub_len2_1: SubRegIndex&amp;lt;64, -1&amp;gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubRegIndex&lt;/code&gt; is the size of the register. Because we are
defining vectors of double precision, this will be 64 bit. The second operand
represents the offset within the register. In contrast to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&amp;lt;n&amp;gt;&lt;/code&gt; registers that
do include two consecutive registers, VFP vectors may include non-consecutive
registers due to the wraparound within a vector bank (recall &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(d7, d4)&lt;/code&gt;). So we
specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; to represent that this is not a physical subregister but a
logical one.&lt;/p&gt;

&lt;p&gt;Now we can use tablegen looping features to define the pairs of registers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;// Double precision pairs
defset list&amp;lt;Register&amp;gt; DPRx2Regs = {
foreach base = [4, 8, 12] in {
    foreach offset = [0, 1, 2, 3] in {
        defvar m = !add(base, offset);
        defvar mnext = !add(base, !and(!add(offset, 1), 0x3));
        let SubRegIndices = [dsub_len2_0, dsub_len2_1] in {
            def &quot;D&quot; # m # &quot;_D&quot; # mnext # &quot;x2&quot; :
                VFPRegistersWithSubregs&amp;lt;
                    !cast&amp;lt;Register&amp;gt;(&quot;D&quot; # m),
                    &quot;d&quot; # m # &quot;x2&quot;,
                    [!cast&amp;lt;Register&amp;gt;(&quot;D&quot; # m), !cast&amp;lt;Register&amp;gt;(&quot;D&quot; # mnext)],
                    [&quot;d&quot; # m # &quot;x2&quot;]&amp;gt;;
        }
    }
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a bit difficult to read. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base&lt;/code&gt; represents the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&amp;lt;n&amp;gt;&lt;/code&gt; that begins a
vector bank: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d4&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d8&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d12&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offset&lt;/code&gt; represents how many elements there
are within each bank. These two loops execute and will be generating definitions.
Because of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defset&lt;/code&gt; directive enclosing everything, those definitions will
also be referenced in a list called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2Regs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we compute first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base + offset&lt;/code&gt; and we name this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;.
Then we compute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mnext&lt;/code&gt; as the logical next one but making sure we wrap around
(we achieve this using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!and(..., 0x3)&lt;/code&gt; as we have to compute mod 4).&lt;/p&gt;

&lt;p&gt;Now that we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mnext&lt;/code&gt; we can define the pair itself. The definition
will be named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&amp;lt;m&amp;gt;_D&amp;lt;mnext&amp;gt;x2&lt;/code&gt; (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D4_D5x2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D5_D6x2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D6_D7x2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D7_D4x2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D8_D9x2&lt;/code&gt;, …) this name is arbitrary but should be a valid C++
identifier because one of the tablegen backends will define enumerators for
those registers.&lt;/p&gt;

&lt;p&gt;In order to generate the register we use a specialised class called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VFPRegistersWithSubregs&lt;/code&gt; which is just a convenience for this task.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;class VFPRegistersWithSubregs&amp;lt;Register EncReg, string n, list&amp;lt;Register&amp;gt; subregs,
                          list&amp;lt;string&amp;gt; alt = []&amp;gt;
      : RegisterWithSubRegs&amp;lt;n, subregs&amp;gt; {
  let HWEncoding = EncReg.HWEncoding;
  let AltNames = alt;
  let Namespace = &quot;ARM&quot;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you check above how we use this class, the first argument is the encoding
register. We will always use the first register of the group for the encoding
(however you will see that eventually we won’t be using this). We are naming
those registers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&amp;lt;n&amp;gt;x2&lt;/code&gt; in the assembly. We will not use them and in fact we
should forbid those names in the assembler that LLVM will generate for the ARM
backend, but for simplicity we will ignore this. Finally see how we link
the current definition to each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&amp;lt;m&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&amp;lt;mnext&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have the registers defined. Those are the resources. Those resources
can be used in instructions via register classes, which are the sets of useable
registers in instructions. Due to the way we have designed the registers
all of them will be usable in a register class for vectors of doubles. We can
simply use the list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DPRx2Regs&lt;/code&gt; that we built using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defset&lt;/code&gt; above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;def DPRx2 : RegisterClass&amp;lt;&quot;ARM&quot;, [v2f64], 64, (add DPRx2Regs)&amp;gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second operand is the list of &lt;em&gt;machine&lt;/em&gt; types that we can represent with
this register. In this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2f64&lt;/code&gt; is equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;2 x double&amp;gt;&lt;/code&gt; in LLVM IR.
Machine types are fixed set of types that backends can use (i.e. LLVM IR has
types that machine types do not represent) and are somehow associated to the
physical types of CPUs. The third operand is the alignment, in bits, used
when loading or storing a register from memory. Due to the way we are going
to load them, they can be aligned to 8 bytes (64 bit).&lt;/p&gt;

&lt;p&gt;And that’s it. We can do the same for single precision. This time sizes
are 32 and each register will contain 4 subregisters. The type of the
registers will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v4f32&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tablegen&quot; data-lang=&quot;tablegen&quot;&gt;def ssub_len4_0: SubRegIndex&amp;lt;32, -1&amp;gt;;
def ssub_len4_1: SubRegIndex&amp;lt;32, -1&amp;gt;;
def ssub_len4_2: SubRegIndex&amp;lt;32, -1&amp;gt;;
def ssub_len4_3: SubRegIndex&amp;lt;32, -1&amp;gt;;

// Single precision quads
defset list&amp;lt;Register&amp;gt; SPRx4Regs = {
foreach base = [8, 16, 24] in {
    foreach offset = [0, 1, 2, 3, 4, 5, 6, 7] in {
        defvar m = !add(base, offset);
        defvar mnext1 = !add(base, !and(!add(offset, 1), 0x7));
        defvar mnext2 = !add(base, !and(!add(offset, 2), 0x7));
        defvar mnext3 = !add(base, !and(!add(offset, 3), 0x7));
        let SubRegIndices = [ssub_len4_0, ssub_len4_1, ssub_len4_2, ssub_len4_3]
        in {
            def &quot;S&quot; # m # &quot;_S&quot; # mnext1 # &quot;_S&quot; # mnext2 # &quot;_S&quot; # mnext3 # &quot;x4&quot; :
                VFPRegistersWithSubregs&amp;lt;
                    !cast&amp;lt;Register&amp;gt;(&quot;S&quot; # m),
                    &quot;s&quot; # m # &quot;x4&quot;,
                    [!cast&amp;lt;Register&amp;gt;(&quot;S&quot; # m),
                     !cast&amp;lt;Register&amp;gt;(&quot;S&quot; # mnext1),
                     !cast&amp;lt;Register&amp;gt;(&quot;S&quot; # mnext2),
                     !cast&amp;lt;Register&amp;gt;(&quot;S&quot; # mnext3)],
                    [&quot;s&quot; # m # &quot;x4&quot;]&amp;gt;;
        }
    }
}
}
def SPRx4 : RegisterClass&amp;lt;&quot;ARM&quot;, [v4f32], 32, (add SPRx4Regs)&amp;gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the next chapter we will talk about what changes we have to do to be able
to track &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fpscr&lt;/code&gt; so we can change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt; field with confidence.&lt;/p&gt;</content><author><name>Roger Ferrer Ibáñez</name></author><summary type="html">In the previous installment we discussed a bit how to generate code using the vector feature of the CPU of the Raspberry Pi 1. Let’s start hacking LLVM.</summary></entry></feed>